---
swagger: "2.0"
info:
  description: "Build custom integrations with the LaunchDarkly REST API"
  version: "5.3.0"
  title: "LaunchDarkly REST API"
  termsOfService: "https://launchdarkly.com/terms"
  contact:
    name: "LaunchDarkly Support"
    url: "https://support.launchdarkly.com"
    email: "support@launchdarkly.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "app.launchdarkly.com"
basePath: "/api/v2"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- Token: []
paths:
  /projects:
    get:
      tags:
      - "Projects"
      summary: "Returns a list of all projects in the account."
      operationId: "getProjects"
      parameters: []
      responses:
        "200":
          description: "Projects response"
          schema:
            $ref: "#/definitions/Projects"
        "401":
          description: "Invalid access token."
    post:
      tags:
      - "Projects"
      summary: "Create a new project with the given key and name."
      operationId: "postProject"
      parameters:
      - in: "body"
        name: "projectBody"
        description: "Project keys must be unique within an account."
        required: true
        schema:
          $ref: "#/definitions/projectBody"
        x-exportParamName: "ProjectBody"
      responses:
        "201":
          description: "Successful Project response."
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /projects/{projectKey}:
    get:
      tags:
      - "Projects"
      summary: "Fetch a single project by key."
      operationId: "getProject"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      responses:
        "200":
          description: "Successful Project response."
          schema:
            $ref: "#/definitions/Project"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Projects"
      summary: "Delete a project by key. Caution-- deleting a project will delete\
        \ all associated environments and feature flags. You cannot delete the last\
        \ project in an account."
      operationId: "deleteProject"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Projects"
      summary: "Modify a project by ID."
      operationId: "patchProject"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        "200":
          description: "Successful Project response."
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /projects/{projectKey}/environments:
    post:
      tags:
      - "Environments"
      summary: "Create a new environment in a specified project with a given name,\
        \ key, and swatch color."
      operationId: "postEnvironment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - in: "body"
        name: "environmentBody"
        description: "New environment."
        required: true
        schema:
          $ref: "#/definitions/EnvironmentPost"
        x-exportParamName: "EnvironmentBody"
      responses:
        "201":
          description: "Environment response."
          schema:
            $ref: "#/definitions/Environment"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /projects/{projectKey}/environments/{environmentKey}:
    get:
      tags:
      - "Environments"
      summary: "Get an environment given a project and key."
      operationId: "getEnvironment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      responses:
        "200":
          description: "Environment response."
          schema:
            $ref: "#/definitions/Environment"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Environments"
      summary: "Delete an environment in a specific project."
      operationId: "deleteEnvironment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Environments"
      summary: "Modify an environment by ID. If you try to patch the environment by\
        \ setting both required and requiredApprovalTags, it will result in an error.\
        \ Users can specify either required approvals for all flags in an environment\
        \ or those with specific tags, but not both. Only customers on an Enterprise\
        \ plan can require approval for flag updates with either mechanism."
      operationId: "patchEnvironment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        "200":
          description: "Environment response."
          schema:
            $ref: "#/definitions/Environment"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /projects/{projectKey}/environments/{environmentKey}/apiKey:
    post:
      tags:
      - "Environments"
      summary: "Reset an environment's SDK key with an optional expiry time for the\
        \ old key."
      operationId: "resetEnvironmentSDKKey"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "expiry"
        in: "query"
        description: "An expiration time for the old environment SDK key, expressed\
          \ as a Unix epoch time in milliseconds. By default, the key will expire\
          \ immediately."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Expiry"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Environment response."
          schema:
            $ref: "#/definitions/Environment"
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /projects/{projectKey}/environments/{environmentKey}/mobileKey:
    post:
      tags:
      - "Environments"
      summary: "Reset an environment's mobile key. The optional expiry for the old\
        \ key is deprecated for this endpoint, so the old key will always expire immediately."
      operationId: "resetEnvironmentMobileKey"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "expiry"
        in: "query"
        description: "The expiry parameter is deprecated for this endpoint, so the\
          \ old mobile key will always expire immediately. This parameter will be\
          \ removed in an upcoming major API client version."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Expiry"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Environment response."
          schema:
            $ref: "#/definitions/Environment"
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /flags/{projectKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get a list of all features in the given project."
      operationId: "getFeatureFlags"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "env"
        in: "query"
        description: "By default, each feature will include configurations for each\
          \ environment. You can filter environments with the env query parameter.\
          \ For example, setting env=[\"production\"] will restrict the returned configurations\
          \ to just your production environment."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Env"
      - name: "summary"
        in: "query"
        description: "By default in api version >= 1, flags will _not_ include their\
          \ list of prerequisites, targets or rules.  Set summary=0 to include these\
          \ fields for each flag returned."
        required: false
        type: "boolean"
        x-exportParamName: "Summary"
        x-optionalDataType: "Bool"
      - name: "archived"
        in: "query"
        description: "When set to 1, only archived flags will be included in the list\
          \ of flags returned.  By default, archived flags are not included in the\
          \ list of flags."
        required: false
        type: "boolean"
        x-exportParamName: "Archived"
        x-optionalDataType: "Bool"
      - name: "limit"
        in: "query"
        description: "The number of objects to return. Defaults to -1, which returns\
          \ everything."
        required: false
        type: "number"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float32"
      - name: "offset"
        in: "query"
        description: "Where to start in the list. This is for use with pagination.\
          \ For example, an offset of 10 would skip the first 10 items and then return\
          \ the next limit items."
        required: false
        type: "number"
        x-exportParamName: "Offset"
        x-optionalDataType: "Float32"
      - name: "filter"
        in: "query"
        description: "A comma-separated list of filters. Each filter is of the form\
          \ field:value."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "A comma-separated list of fields to sort by. A field prefixed\
          \ by a - will be sorted in descending order."
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "Filter by tag. A tag can be used to group flags across projects."
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Flags response."
          schema:
            $ref: "#/definitions/FeatureFlags"
        "401":
          description: "Invalid access token."
    post:
      tags:
      - "Feature flags"
      summary: "Creates a new feature flag."
      operationId: "postFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - in: "body"
        name: "featureFlagBody"
        description: "Create a new feature flag."
        required: true
        schema:
          $ref: "#/definitions/featureFlagBody"
        x-exportParamName: "FeatureFlagBody"
      - name: "clone"
        in: "query"
        description: "The key of the feature flag to be cloned. The key identifies\
          \ the flag in your code.  For example, setting clone=flagKey will copy the\
          \ full targeting configuration for all environments (including on/off state)\
          \ from the original flag to the new flag."
        required: false
        type: "string"
        x-exportParamName: "Clone"
        x-optionalDataType: "String"
      responses:
        "201":
          description: "Flag response."
          schema:
            $ref: "#/definitions/FeatureFlag"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /flags/{projectKey}/{featureFlagKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get a single feature flag by key."
      operationId: "getFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "env"
        in: "query"
        description: "By default, each feature will include configurations for each\
          \ environment. You can filter environments with the env query parameter.\
          \ For example, setting env=[\"production\"] will restrict the returned configurations\
          \ to just your production environment."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Env"
      responses:
        "200":
          description: "Flag response."
          schema:
            $ref: "#/definitions/FeatureFlag"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Feature flags"
      summary: "Delete a feature flag in all environments. Be careful-- only delete\
        \ feature flags that are no longer being used by your application."
      operationId: "deleteFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Feature flags"
      summary: "Perform a partial update to a feature."
      operationId: "patchFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - in: "body"
        name: "patchComment"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project, and an optional comment. 'http://jsonpatch.com/' Feature\
          \ flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386'\
          \ The addition of comments is also supported."
        required: true
        schema:
          $ref: "#/definitions/patchComment"
        x-exportParamName: "PatchComment"
      responses:
        "200":
          description: "Feature flag response."
          schema:
            $ref: "#/definitions/FeatureFlag"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /flags/{projectKey}/{featureFlagKey}/copy:
    post:
      tags:
      - "Feature flags"
      summary: "Copies the feature flag configuration from one environment to the\
        \ same feature flag in another environment."
      operationId: "copyFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - in: "body"
        name: "featureFlagCopyBody"
        description: "Copy feature flag configurations between environments."
        required: true
        schema:
          $ref: "#/definitions/featureFlagCopyBody"
        x-exportParamName: "FeatureFlagCopyBody"
      responses:
        "201":
          description: "Flag configuration copy response."
          schema:
            $ref: "#/definitions/FeatureFlag"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /flag-statuses/{projectKey}/{environmentKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get a list of statuses for all feature flags. The status includes\
        \ the last time the feature flag was requested, as well as the state of the\
        \ flag."
      operationId: "getFeatureFlagStatuses"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      responses:
        "200":
          description: "List of feature flag statuses."
          schema:
            $ref: "#/definitions/FeatureFlagStatuses"
        "401":
          description: "Invalid access token."
  /flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get the status for a particular feature flag."
      operationId: "getFeatureFlagStatus"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        "200":
          description: "Status of the requested feature flag."
          schema:
            $ref: "#/definitions/FeatureFlagStatus"
        "401":
          description: "Invalid access token."
  /flag-status/{projectKey}/{featureFlagKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get the status for a particular feature flag across environments"
      operationId: "getFeatureFlagStatusAcrossEnvironments"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        "200":
          description: "Status of the requested feature flag across environments"
          schema:
            $ref: "#/definitions/FeatureFlagStatusAcrossEnvironments"
        "401":
          description: "Invalid access token."
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
  /flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get expiring user targets for feature flag"
      operationId: "getExpiringUserTargets"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        "200":
          description: "User targets of the requested feature flag."
          schema:
            $ref: "#/definitions/UserTargetingExpirationForFlags"
        "401":
          description: "Invalid access token."
    patch:
      tags:
      - "Feature flags"
      summary: "Update, add, or delete expiring user targets on feature flag"
      operationId: "patchExpiringUserTargets"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - in: "body"
        name: "SemanticPatchWithComment"
        description: "Requires a Semantic Patch representation of the desired changes\
          \ to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'.\
          \ The addition of comments is also supported."
        required: true
        schema:
          type: "object"
        x-exportParamName: "SemanticPatchWithComment"
      responses:
        "200":
          description: "User targeting expirations on feature flag response."
          schema:
            $ref: "#/definitions/UserTargetingExpirationForFlags"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /flags/{projectKey}/{featureFlagKey}/dependent-flags:
    get:
      tags:
      - "Feature flags"
      summary: "Get dependent flags across all environments for the flag specified\
        \ in the path parameters"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        "200":
          description: "Dependent flags accross all environemnts in the project response"
          schema:
            $ref: "#/definitions/MultiEnvironmentDependentFlags"
        "401":
          description: "Invalid access token."
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
        "404":
          description: "Invalid resource specifier."
  /flags/{projectKey}/{environmentKey}/{featureFlagKey}/dependent-flags:
    get:
      tags:
      - "Feature flags"
      summary: "Get dependent flags for the flag in the environment specified in path\
        \ parameters"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        "200":
          description: "Dependent flags in a single envrionemnt response"
          schema:
            $ref: "#/definitions/DependentFlagsByEnvironment"
        "401":
          description: "Invalid access token."
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
        "404":
          description: "Invalid resource specifier."
  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes:
    get:
      tags:
      - "Feature flags"
      summary: "Get all scheduled workflows for a feature flag by key."
      operationId: "getFlagConfigScheduledChanges"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      responses:
        "200":
          description: "A list of scheduled changes for feature flag response."
          schema:
            $ref: "#/definitions/FeatureFlagScheduledChanges"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    post:
      tags:
      - "Feature flags"
      summary: "Creates a new scheduled change for a feature flag."
      operationId: "postFlagConfigScheduledChanges"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - in: "body"
        name: "flagConfigScheduledChangesPostBody"
        description: "Create scheduled changes on a feature flag."
        required: true
        schema:
          $ref: "#/definitions/flagConfigScheduledChangesPostBody"
        x-exportParamName: "FlagConfigScheduledChangesPostBody"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      responses:
        "201":
          description: "A scheduled change for feature flag response."
          schema:
            $ref: "#/definitions/FeatureFlagScheduledChange"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes-conflicts:
    post:
      tags:
      - "Feature flags"
      summary: "Lists conflicts between the given instructions and any existing scheduled\
        \ changes for the feature flag. The actual HTTP verb should be REPORT, not\
        \ POST."
      operationId: "getFlagConfigScheduledChangesConflicts"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - in: "body"
        name: "flagConfigScheduledChangesConflictsBody"
        description: "Used to determine if a semantic patch will result in conflicts\
          \ with scheduled changes on a feature flag."
        required: true
        schema:
          $ref: "#/definitions/flagConfigScheduledChangesConflictsBody"
        x-exportParamName: "FlagConfigScheduledChangesConflictsBody"
      responses:
        "200":
          description: "Scheduled changes conflict response"
          schema:
            $ref: "#/definitions/FeatureFlagScheduledChangesConflicts"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}:
    get:
      tags:
      - "Feature flags"
      summary: "Get a scheduled change on a feature flag by id."
      operationId: "getFlagConfigScheduledChange"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "scheduledChangeId"
        in: "path"
        description: "The id of the scheduled change"
        required: true
        type: "string"
        x-exportParamName: "ScheduledChangeId"
      responses:
        "200":
          description: "A scheduled change for feature flag response."
          schema:
            $ref: "#/definitions/FeatureFlagScheduledChange"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Feature flags"
      summary: "Delete a scheduled change on a feature flag in an environment."
      operationId: "deleteFlagConfigScheduledChanges"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "scheduledChangeId"
        in: "path"
        description: "The id of the scheduled change"
        required: true
        type: "string"
        x-exportParamName: "ScheduledChangeId"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Feature flags"
      summary: "Updates an existing scheduled-change on a feature flag in an environment."
      operationId: "patchFlagConfigScheduledChange"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - in: "body"
        name: "flagConfigScheduledChangesPatchBody"
        description: "Update scheduled changes on a feature flag."
        required: true
        schema:
          $ref: "#/definitions/flagConfigScheduledChangesPatchBody"
        x-exportParamName: "FlagConfigScheduledChangesPatchBody"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "scheduledChangeId"
        in: "path"
        description: "The id of the scheduled change"
        required: true
        type: "string"
        x-exportParamName: "ScheduledChangeId"
      responses:
        "201":
          description: "A Scheduled change for feature flag response."
          schema:
            $ref: "#/definitions/FeatureFlagScheduledChange"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests:
    get:
      tags:
      - "Feature flags"
      summary: "Get all approval requests for a feature flag config"
      operationId: "getApprovalRequests"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      responses:
        "200":
          description: "Approval requests response"
          schema:
            $ref: "#/definitions/ApprovalRequests"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}:
    get:
      tags:
      - "Feature flags"
      summary: "Get a single approval request for a feature flag config"
      operationId: "getApprovalRequest"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "approvalRequestId"
        in: "path"
        description: "The approval request ID"
        required: true
        type: "string"
        x-exportParamName: "ApprovalRequestId"
      responses:
        "200":
          description: "Approval request response"
          schema:
            $ref: "#/definitions/ApprovalRequests"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    post:
      tags:
      - "Feature flags"
      summary: "Create an approval request for a feature flag config"
      operationId: "postApprovalRequest"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "approvalRequestId"
        in: "path"
        description: "The approval request ID"
        required: true
        type: "string"
        x-exportParamName: "ApprovalRequestId"
      - in: "body"
        name: "approvalRequestConfigBody"
        description: "Create a new approval request"
        required: false
        schema:
          $ref: "#/definitions/approvalRequestConfigBody"
        x-exportParamName: "ApprovalRequestConfigBody"
      responses:
        "200":
          description: "Approval request response"
          schema:
            $ref: "#/definitions/ApprovalRequest"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Feature flags"
      summary: "Delete an approval request for a feature flag config"
      operationId: "deleteApprovalRequest"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "approvalRequestId"
        in: "path"
        description: "The approval request ID"
        required: true
        type: "string"
        x-exportParamName: "ApprovalRequestId"
      - in: "body"
        name: "approvalRequestConfigBody"
        description: "Create a new approval request"
        required: false
        schema:
          $ref: "#/definitions/approvalRequestConfigBody"
        x-exportParamName: "ApprovalRequestConfigBody"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/apply:
    post:
      tags:
      - "Feature flags"
      summary: "Apply approval request for a feature flag config"
      operationId: "postApplyApprovalRequest"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "approvalRequestId"
        in: "path"
        description: "The approval request ID"
        required: true
        type: "string"
        x-exportParamName: "ApprovalRequestId"
      - in: "body"
        name: "approvalRequestApplyConfigBody"
        description: "Apply an approval request"
        required: true
        schema:
          $ref: "#/definitions/approvalRequestApplyConfigBody"
        x-exportParamName: "ApprovalRequestApplyConfigBody"
      responses:
        "200":
          description: "Approval request applied response"
          schema:
            $ref: "#/definitions/ApprovalRequests"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/review:
    post:
      tags:
      - "Feature flags"
      summary: "Review approval request for a feature flag config"
      operationId: "postReviewApprovalRequest"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "approvalRequestId"
        in: "path"
        description: "The approval request ID"
        required: true
        type: "string"
        x-exportParamName: "ApprovalRequestId"
      - in: "body"
        name: "approvalRequestReviewConfigBody"
        description: "Review an approval request"
        required: true
        schema:
          $ref: "#/definitions/approvalRequestReviewConfigBody"
        x-exportParamName: "ApprovalRequestReviewConfigBody"
      responses:
        "200":
          description: "Approval request reviewed response"
          schema:
            $ref: "#/definitions/ApprovalRequests"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
  /segments/{projectKey}/{environmentKey}:
    get:
      tags:
      - "User segments"
      summary: "Get a list of all user segments in the given project."
      operationId: "getUserSegments"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "tag"
        in: "query"
        description: "Filter by tag. A tag can be used to group flags across projects."
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Segments response."
          schema:
            $ref: "#/definitions/UserSegments"
        "401":
          description: "Invalid access token."
    post:
      tags:
      - "User segments"
      summary: "Creates a new user segment."
      operationId: "postUserSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - in: "body"
        name: "userSegmentBody"
        description: "Create a new user segment."
        required: true
        schema:
          $ref: "#/definitions/userSegmentBody"
        x-exportParamName: "UserSegmentBody"
      responses:
        "201":
          description: "User segment response."
          schema:
            $ref: "#/definitions/UserSegment"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /segments/{projectKey}/{environmentKey}/{userSegmentKey}:
    get:
      tags:
      - "User segments"
      summary: "Get a single user segment by key."
      operationId: "getUserSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userSegmentKey"
        in: "path"
        description: "The user segment's key. The key identifies the user segment\
          \ in your code."
        required: true
        type: "string"
        x-exportParamName: "UserSegmentKey"
      responses:
        "200":
          description: "User segment response."
          schema:
            $ref: "#/definitions/UserSegment"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "User segments"
      summary: "Delete a user segment."
      operationId: "deleteUserSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userSegmentKey"
        in: "path"
        description: "The user segment's key. The key identifies the user segment\
          \ in your code."
        required: true
        type: "string"
        x-exportParamName: "UserSegmentKey"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "User segments"
      summary: "Perform a partial update to a user segment."
      operationId: "patchUserSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userSegmentKey"
        in: "path"
        description: "The user segment's key. The key identifies the user segment\
          \ in your code."
        required: true
        type: "string"
        x-exportParamName: "UserSegmentKey"
      - in: "body"
        name: "PatchOnly"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/' Feature flag patches also support\
          \ JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition\
          \ of comments is also supported."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchOnly"
      responses:
        "200":
          description: "User segment response."
          schema:
            $ref: "#/definitions/UserSegment"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey}:
    get:
      tags:
      - "User segments"
      summary: "Get expiring user targets for user segment"
      operationId: "getExpiringUserTargetsOnSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userSegmentKey"
        in: "path"
        description: "The user segment's key. The key identifies the user segment\
          \ in your code."
        required: true
        type: "string"
        x-exportParamName: "UserSegmentKey"
      responses:
        "200":
          description: "User targeting expirations on user segment response."
          schema:
            $ref: "#/definitions/UserTargetingExpirationForSegment"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "User segments"
      summary: "Update, add, or delete expiring user targets on user segment"
      operationId: "patchExpiringUserTargetsOnSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userSegmentKey"
        in: "path"
        description: "The user segment's key. The key identifies the user segment\
          \ in your code."
        required: true
        type: "string"
        x-exportParamName: "UserSegmentKey"
      - in: "body"
        name: "SemanticPatchWithComment"
        description: "Requires a Semantic Patch representation of the desired changes\
          \ to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'.\
          \ The addition of comments is also supported."
        required: true
        schema:
          type: "object"
        x-exportParamName: "SemanticPatchWithComment"
      responses:
        "200":
          description: "User targeting expirations on user segment response."
          schema:
            $ref: "#/definitions/UserTargetingExpirationForSegment"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /segments/{projectKey}/{environmentKey}/{userSegmentKey}/users:
    post:
      tags:
      - "User segments"
      summary: "Update targets included or excluded in a big segment"
      operationId: "updateBigSegmentTargets"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userSegmentKey"
        in: "path"
        description: "The user segment's key. The key identifies the user segment\
          \ in your code."
        required: true
        type: "string"
        x-exportParamName: "UserSegmentKey"
      - in: "body"
        name: "bigSegmentTargetsBody"
        description: "Add or remove user targets to the included or excluded lists\
          \ on a big segment. Contact your account manager for early access to this\
          \ feature."
        required: true
        schema:
          $ref: "#/definitions/bigSegmentTargetsBody"
        x-exportParamName: "BigSegmentTargetsBody"
      responses:
        "204":
          description: "Action completed successfully."
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
  /users/{projectKey}/{environmentKey}:
    get:
      tags:
      - "Users"
      summary: "List all users in the environment. Includes the total count of users.\
        \ In each page, there will be up to 'limit' users returned (default 20). This\
        \ is useful for exporting all users in the system for further analysis. Paginated\
        \ collections will include a next link containing a URL with the next set\
        \ of elements in the collection."
      operationId: "getUsers"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "limit"
        in: "query"
        description: "Pagination limit."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "h"
        in: "query"
        description: "This parameter is required when following \"next\" links."
        required: false
        type: "string"
        x-exportParamName: "H"
        x-optionalDataType: "String"
      - name: "scrollId"
        in: "query"
        description: "This parameter is required when following \"next\" links."
        required: false
        type: "string"
        x-exportParamName: "ScrollId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Users response."
          schema:
            $ref: "#/definitions/Users"
        "401":
          description: "Invalid access token."
  /user-search/{projectKey}/{environmentKey}:
    get:
      tags:
      - "Users"
      summary: "Search users in LaunchDarkly based on their last active date, or a\
        \ search query. It should not be used to enumerate all users in LaunchDarkly--\
        \ use the List users API resource."
      operationId: "getSearchUsers"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "q"
        in: "query"
        description: "Search query."
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Pagination limit."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "Specifies the first item to return in the collection."
        required: false
        type: "integer"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "after"
        in: "query"
        description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
          \ All entries returned will have occurred after this timestamp."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "After"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Users response."
          schema:
            $ref: "#/definitions/Users"
        "401":
          description: "Invalid access token."
  /users/{projectKey}/{environmentKey}/{userKey}:
    get:
      tags:
      - "Users"
      summary: "Get a user by key."
      operationId: "getUser"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      responses:
        "200":
          description: "User response."
          schema:
            $ref: "#/definitions/UserRecord"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Users"
      summary: "Delete a user by ID."
      operationId: "deleteUser"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
  /users/{projectKey}/{environmentKey}/{userKey}/flags:
    get:
      tags:
      - "User settings"
      summary: "Fetch a single flag setting for a user by key."
      operationId: "getUserFlagSettings"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      responses:
        "200":
          description: "User flags settings response."
          schema:
            $ref: "#/definitions/UserFlagSettings"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
  /users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}:
    get:
      tags:
      - "User settings"
      summary: "Fetch a single flag setting for a user by key."
      operationId: "getUserFlagSetting"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        "200":
          description: "User flag setting response."
          schema:
            $ref: "#/definitions/UserFlagSetting"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    put:
      tags:
      - "User settings"
      summary: "Specifically enable or disable a feature flag for a user based on\
        \ their key."
      operationId: "putFlagSetting"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - in: "body"
        name: "userSettingsBody"
        required: true
        schema:
          $ref: "#/definitions/userSettingsBody"
        x-exportParamName: "UserSettingsBody"
      responses:
        "204":
          description: "Action completed successfully."
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
  /users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}:
    get:
      tags:
      - "User settings"
      summary: "Get expiring dates on flags for user"
      operationId: "getExpiringUserTargetsForUser"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      responses:
        "200":
          description: "User targets of the requested feature flag."
          schema:
            $ref: "#/definitions/UserTargetingExpirationOnFlagsForUser"
        "401":
          description: "Invalid access token."
    patch:
      tags:
      - "User settings"
      summary: "Update, add, or delete expiring user targets for a single user on\
        \ all flags"
      operationId: "patchExpiringUserTargetsForFlags"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      - in: "body"
        name: "SemanticPatchWithComment"
        description: "Requires a Semantic Patch representation of the desired changes\
          \ to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'.\
          \ The addition of comments is also supported."
        required: true
        schema:
          type: "object"
        x-exportParamName: "SemanticPatchWithComment"
      responses:
        "200":
          description: "User Targeting expiration for single user on all flags response."
          schema:
            $ref: "#/definitions/UserTargetingExpirationOnFlagsForUser"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /auditlog:
    get:
      tags:
      - "Audit log"
      summary: "Get a list of all audit log entries. The query parameters allow you\
        \ to restrict the returned results by date ranges, resource specifiers, or\
        \ a full-text search query."
      operationId: "getAuditLogEntries"
      parameters:
      - name: "before"
        in: "query"
        description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
          \ All entries returned will have before this timestamp."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Before"
        x-optionalDataType: "Int64"
      - name: "after"
        in: "query"
        description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
          \ All entries returned will have occurred after this timestamp."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "After"
        x-optionalDataType: "Int64"
      - name: "q"
        in: "query"
        description: "Text to search for. You can search for the full or partial name\
          \ of the resource involved or full or partial email address of the member\
          \ who made the change."
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "A limit on the number of audit log entries to be returned, between\
          \ 1 and 20."
        required: false
        type: "number"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float32"
      - name: "spec"
        in: "query"
        description: "A resource specifier, allowing you to filter audit log listings\
          \ by resource."
        required: false
        type: "string"
        x-exportParamName: "Spec"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Audit log entries response."
          schema:
            $ref: "#/definitions/AuditLogEntries"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
  /auditlog/{resourceId}:
    get:
      tags:
      - "Audit log"
      summary: "Use this endpoint to fetch a single audit log entry by its resouce\
        \ ID."
      operationId: "getAuditLogEntry"
      parameters:
      - name: "resourceId"
        in: "path"
        description: "The resource ID."
        required: true
        type: "string"
        x-exportParamName: "ResourceId"
      responses:
        "200":
          description: "Audit log entry response."
          schema:
            $ref: "#/definitions/AuditLogEntry"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
  /webhooks:
    get:
      tags:
      - "Webhooks"
      summary: "Fetch a list of all webhooks."
      operationId: "getWebhooks"
      parameters: []
      responses:
        "200":
          description: "Webhooks response."
          schema:
            $ref: "#/definitions/Webhooks"
        "401":
          description: "Invalid access token."
    post:
      tags:
      - "Webhooks"
      summary: "Create a webhook."
      operationId: "postWebhook"
      parameters:
      - in: "body"
        name: "webhookBody"
        description: "New webhook."
        required: true
        schema:
          $ref: "#/definitions/webhookBody"
        x-exportParamName: "WebhookBody"
      responses:
        "201":
          description: "Webhook response."
          schema:
            $ref: "#/definitions/Webhook"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
  /webhooks/{resourceId}:
    get:
      tags:
      - "Webhooks"
      summary: "Get a webhook by ID."
      operationId: "getWebhook"
      parameters:
      - name: "resourceId"
        in: "path"
        description: "The resource ID."
        required: true
        type: "string"
        x-exportParamName: "ResourceId"
      responses:
        "200":
          description: "Webhook response."
          schema:
            $ref: "#/definitions/Webhook"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Webhooks"
      summary: "Delete a webhook by ID."
      operationId: "deleteWebhook"
      parameters:
      - name: "resourceId"
        in: "path"
        description: "The resource ID."
        required: true
        type: "string"
        x-exportParamName: "ResourceId"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Webhooks"
      summary: "Modify a webhook by ID."
      operationId: "patchWebhook"
      parameters:
      - name: "resourceId"
        in: "path"
        description: "The resource ID."
        required: true
        type: "string"
        x-exportParamName: "ResourceId"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        "200":
          description: "Webhook response."
          schema:
            $ref: "#/definitions/Webhook"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /roles:
    get:
      tags:
      - "Custom roles"
      summary: "Return a complete list of custom roles."
      operationId: "getCustomRoles"
      parameters: []
      responses:
        "200":
          description: "Custom roles response."
          schema:
            $ref: "#/definitions/CustomRoles"
        "401":
          description: "Invalid access token."
    post:
      tags:
      - "Custom roles"
      summary: "Create a new custom role."
      operationId: "postCustomRole"
      parameters:
      - in: "body"
        name: "customRoleBody"
        description: "New role or roles to create."
        required: true
        schema:
          $ref: "#/definitions/customRoleBody"
        x-exportParamName: "CustomRoleBody"
      responses:
        "201":
          description: "Custom role response."
          schema:
            $ref: "#/definitions/CustomRole"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /roles/{customRoleKey}:
    get:
      tags:
      - "Custom roles"
      summary: "Get one custom role by key."
      operationId: "getCustomRole"
      parameters:
      - name: "customRoleKey"
        in: "path"
        description: "The custom role key."
        required: true
        type: "string"
        x-exportParamName: "CustomRoleKey"
      responses:
        "200":
          description: "Custom role response."
          schema:
            $ref: "#/definitions/CustomRole"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
    delete:
      tags:
      - "Custom roles"
      summary: "Delete a custom role by key."
      operationId: "deleteCustomRole"
      parameters:
      - name: "customRoleKey"
        in: "path"
        description: "The custom role key."
        required: true
        type: "string"
        x-exportParamName: "CustomRoleKey"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Custom roles"
      summary: "Modify a custom role by key."
      operationId: "patchCustomRole"
      parameters:
      - name: "customRoleKey"
        in: "path"
        description: "The custom role key."
        required: true
        type: "string"
        x-exportParamName: "CustomRoleKey"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        "200":
          description: "Custom role response."
          schema:
            $ref: "#/definitions/CustomRole"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /members:
    get:
      tags:
      - "Team members"
      summary: "Returns a list of all members in the account."
      operationId: "getMembers"
      parameters:
      - name: "limit"
        in: "query"
        description: "The number of objects to return. Defaults to -1, which returns\
          \ everything."
        required: false
        type: "number"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float32"
      - name: "offset"
        in: "query"
        description: "Where to start in the list. This is for use with pagination.\
          \ For example, an offset of 10 would skip the first 10 items and then return\
          \ the next limit items."
        required: false
        type: "number"
        x-exportParamName: "Offset"
        x-optionalDataType: "Float32"
      - name: "filter"
        in: "query"
        description: "A comma-separated list of filters. Each filter is of the form\
          \ field:value."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "A comma-separated list of fields to sort by. A field prefixed\
          \ by a - will be sorted in descending order."
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Members response."
          schema:
            $ref: "#/definitions/Members"
        "401":
          description: "Invalid access token."
    post:
      tags:
      - "Team members"
      summary: "Invite new members."
      operationId: "postMembers"
      parameters:
      - in: "body"
        name: "membersBody"
        description: "New members to invite."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/membersBody"
        x-exportParamName: "MembersBody"
      responses:
        "201":
          description: "Members response."
          schema:
            $ref: "#/definitions/Members"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /members/me:
    get:
      tags:
      - "Team members"
      summary: "Get the current team member associated with the token"
      operationId: "getMe"
      parameters: []
      responses:
        "200":
          description: "Member response."
          schema:
            $ref: "#/definitions/Member"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
  /members/{memberId}:
    get:
      tags:
      - "Team members"
      summary: "Get a single team member by ID."
      operationId: "getMember"
      parameters:
      - name: "memberId"
        in: "path"
        description: "The member ID."
        required: true
        type: "string"
        x-exportParamName: "MemberId"
      responses:
        "200":
          description: "Member response."
          schema:
            $ref: "#/definitions/Member"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
    delete:
      tags:
      - "Team members"
      summary: "Delete a team member by ID."
      operationId: "deleteMember"
      parameters:
      - name: "memberId"
        in: "path"
        description: "The member ID."
        required: true
        type: "string"
        x-exportParamName: "MemberId"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Team members"
      summary: "Modify a team member by ID."
      operationId: "patchMember"
      parameters:
      - name: "memberId"
        in: "path"
        description: "The member ID."
        required: true
        type: "string"
        x-exportParamName: "MemberId"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        "200":
          description: "Member response."
          schema:
            $ref: "#/definitions/Member"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /destinations:
    get:
      tags:
      - "Data export destinations"
      summary: "Returns a list of all data export destinations."
      operationId: "getDestinations"
      parameters: []
      responses:
        "200":
          description: "Destinations response."
          schema:
            $ref: "#/definitions/Destinations"
        "401":
          description: "Invalid access token."
  /destinations/{projectKey}/{environmentKey}:
    post:
      tags:
      - "Data export destinations"
      summary: "Create a new data export destination"
      operationId: "postDestination"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - in: "body"
        name: "destinationBody"
        description: "Create a new data export destination."
        required: true
        schema:
          $ref: "#/definitions/destinationBody"
        x-exportParamName: "DestinationBody"
      responses:
        "201":
          description: "Destination response."
          schema:
            $ref: "#/definitions/Destination"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /destinations/{projectKey}/{environmentKey}/{destinationId}:
    get:
      tags:
      - "Data export destinations"
      summary: "Get a single data export destination by ID"
      operationId: "getDestination"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "destinationId"
        in: "path"
        description: "The data export destination ID."
        required: true
        type: "string"
        x-exportParamName: "DestinationId"
      responses:
        "200":
          description: "Destination response."
          schema:
            $ref: "#/definitions/Destination"
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Data export destinations"
      summary: "Get a single data export destination by ID"
      operationId: "deleteDestination"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "destinationId"
        in: "path"
        description: "The data export destination ID."
        required: true
        type: "string"
        x-exportParamName: "DestinationId"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Data export destinations"
      summary: "Perform a partial update to a data export destination."
      operationId: "patchDestination"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "destinationId"
        in: "path"
        description: "The data export destination ID."
        required: true
        type: "string"
        x-exportParamName: "DestinationId"
      - in: "body"
        name: "PatchOnly"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/' Feature flag patches also support\
          \ JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition\
          \ of comments is also supported."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchOnly"
      responses:
        "200":
          description: "Destination response."
          schema:
            $ref: "#/definitions/Destination"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /usage:
    get:
      tags:
      - "Customer Metrics"
      summary: "Returns of the usage endpoints available."
      operationId: "getUsage"
      parameters: []
      responses:
        "200":
          description: "Usage endpoints"
          schema:
            $ref: "#/definitions/Usage"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
  /usage/streams:
    get:
      tags:
      - "Customer Metrics"
      summary: "Returns a list of all streams."
      operationId: "getStreams"
      parameters: []
      responses:
        "200":
          description: "Stream usage endpoints"
          schema:
            $ref: "#/definitions/Streams"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
  /usage/streams/{source}:
    get:
      tags:
      - "Customer Metrics"
      summary: "Get a stream endpoint and return timeseries data."
      operationId: "getStream"
      parameters:
      - name: "source"
        in: "path"
        description: "The source of where the stream comes from."
        required: true
        type: "string"
        x-exportParamName: "Source"
      responses:
        "200":
          description: "Responds with time series data on stream usage."
          schema:
            $ref: "#/definitions/Stream"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
        "404":
          description: "The stream source you requested could not be found"
          schema:
            $ref: "#/definitions/StreamUsageError"
  /usage/streams/{source}/bysdkversion:
    get:
      tags:
      - "Customer Metrics"
      summary: "Get a stream timeseries data by source show sdk version metadata."
      operationId: "getStreamBySDK"
      parameters:
      - name: "source"
        in: "path"
        description: "The source of where the stream comes from."
        required: true
        type: "string"
        x-exportParamName: "Source"
      responses:
        "200":
          description: "Returns timeseries data and metadata on sdk version."
          schema:
            $ref: "#/definitions/StreamBySDK"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
        "404":
          description: "The stream source you requested could not be found"
          schema:
            $ref: "#/definitions/StreamUsageError"
  /usage/streams/{source}/sdkversions:
    get:
      tags:
      - "Customer Metrics"
      summary: "Get a stream timeseries data by source and show all sdk version associated."
      operationId: "getStreamSDKVersion"
      parameters:
      - name: "source"
        in: "path"
        description: "The source of where the stream comes from."
        required: true
        type: "string"
        x-exportParamName: "Source"
      responses:
        "200":
          description: "Returns timeseries data and all sdk versions."
          schema:
            $ref: "#/definitions/StreamSDKVersion"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
        "404":
          description: "The stream source you requested could not be found"
          schema:
            $ref: "#/definitions/StreamUsageError"
  /usage/mau:
    get:
      tags:
      - "Customer Metrics"
      summary: "Get monthly active user data."
      operationId: "getMAU"
      parameters: []
      responses:
        "200":
          description: "Returns timeseries data and all sdk versions."
          schema:
            $ref: "#/definitions/MAU"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
  /usage/mau/bycategory:
    get:
      tags:
      - "Customer Metrics"
      summary: "Get monthly active user data by category."
      operationId: "getMAUByCategory"
      parameters: []
      responses:
        "200":
          description: "Returns timeseries data and all sdk versions."
          schema:
            $ref: "#/definitions/MAUbyCategory"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
  /usage/events:
    get:
      tags:
      - "Customer Metrics"
      summary: "Get events usage endpoints."
      operationId: "getEvents"
      parameters: []
      responses:
        "200":
          description: "Returns timeseries data and all sdk versions."
          schema:
            $ref: "#/definitions/Events"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
  /usage/events/{type}:
    get:
      tags:
      - "Customer Metrics"
      summary: "Get events usage by event type."
      operationId: "getEvent"
      parameters:
      - name: "type"
        in: "path"
        description: "The type of event we would like to track."
        required: true
        type: "string"
        x-exportParamName: "Type_"
      responses:
        "200":
          description: "Returns timeseries data and all sdk versions."
          schema:
            $ref: "#/definitions/StreamSDKVersion"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
        "404":
          description: "The stream source you requested could not be found"
          schema:
            $ref: "#/definitions/StreamUsageError"
  /usage/evaluations/{envId}/{flagKey}:
    get:
      tags:
      - "Customer Metrics"
      summary: "Get events usage by event id and the feature flag key."
      operationId: "getEvaluations"
      parameters:
      - name: "envId"
        in: "path"
        description: "The environment id for the flag evaluations in question."
        required: true
        type: "string"
        x-exportParamName: "EnvId"
      - name: "flagKey"
        in: "path"
        description: "The key of the flag we want metrics for."
        required: true
        type: "string"
        x-exportParamName: "FlagKey"
      responses:
        "200":
          description: "Returns timeseries data and all sdk versions."
          schema:
            $ref: "#/definitions/StreamSDKVersion"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
        "404":
          description: "The environment or flag you requested could not be found"
          schema:
            $ref: "#/definitions/EvaluationUsageError"
  /tokens:
    get:
      tags:
      - "Access tokens"
      summary: "Returns a list of tokens in the account."
      operationId: "getTokens"
      parameters:
      - name: "showAll"
        in: "query"
        description: "If set to true, and the authentication access token has the\
          \ \"Admin\" role, personal access tokens for all members will be retrieved."
        required: false
        type: "boolean"
        x-exportParamName: "ShowAll"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Tokens response."
          schema:
            $ref: "#/definitions/Tokens"
        "401":
          description: "Invalid access token."
    post:
      tags:
      - "Access tokens"
      summary: "Create a new token."
      operationId: "postToken"
      parameters:
      - in: "body"
        name: "tokenBody"
        description: "Create a new access token."
        required: true
        schema:
          $ref: "#/definitions/tokenBody"
        x-exportParamName: "TokenBody"
      responses:
        "201":
          description: "Token response."
          schema:
            $ref: "#/definitions/Token"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /tokens/{tokenId}:
    get:
      tags:
      - "Access tokens"
      summary: "Get a single access token by ID."
      operationId: "getToken"
      parameters:
      - name: "tokenId"
        in: "path"
        description: "The access token ID."
        required: true
        type: "string"
        x-exportParamName: "TokenId"
      responses:
        "200":
          description: "Token response."
          schema:
            $ref: "#/definitions/Token"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
    delete:
      tags:
      - "Access tokens"
      summary: "Delete an access token by ID."
      operationId: "deleteToken"
      parameters:
      - name: "tokenId"
        in: "path"
        description: "The access token ID."
        required: true
        type: "string"
        x-exportParamName: "TokenId"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Access tokens"
      summary: "Modify an access token by ID."
      operationId: "patchToken"
      parameters:
      - name: "tokenId"
        in: "path"
        description: "The access token ID."
        required: true
        type: "string"
        x-exportParamName: "TokenId"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        "200":
          description: "Token response."
          schema:
            $ref: "#/definitions/Token"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /tokens/{tokenId}/reset:
    post:
      tags:
      - "Access tokens"
      summary: "Reset an access token's secret key with an optional expiry time for\
        \ the old key."
      operationId: "resetToken"
      parameters:
      - name: "tokenId"
        in: "path"
        description: "The access token ID."
        required: true
        type: "string"
        x-exportParamName: "TokenId"
      - name: "expiry"
        in: "query"
        description: "An expiration time for the old token key, expressed as a Unix\
          \ epoch time in milliseconds. By default, the token will expire immediately."
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Expiry"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Token response."
          schema:
            $ref: "#/definitions/Token"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
  /account/relay-auto-configs:
    get:
      tags:
      - "Relay proxy configurations"
      summary: "Returns a list of relay proxy configurations in the account."
      operationId: "getRelayProxyConfigs"
      parameters: []
      responses:
        "200":
          description: "Relay proxy configs response."
          schema:
            $ref: "#/definitions/RelayProxyConfigs"
    post:
      tags:
      - "Relay proxy configurations"
      summary: "Create a new relay proxy config."
      operationId: "postRelayAutoConfig"
      parameters:
      - in: "body"
        name: "relayProxyConfigBody"
        description: "Create a new relay proxy configuration"
        required: true
        schema:
          $ref: "#/definitions/relayProxyConfigBody"
        x-exportParamName: "RelayProxyConfigBody"
      responses:
        "201":
          description: "Relay proxy config response."
          schema:
            $ref: "#/definitions/RelayProxyConfig"
        "400":
          description: "Invalid request body."
        "403":
          description: "Access to the requested resource was denied."
  /account/relay-auto-configs/{id}:
    get:
      tags:
      - "Relay proxy configurations"
      summary: "Get a single relay proxy configuration by ID."
      operationId: "getRelayProxyConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "The relay proxy configuration ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "200":
          description: "Relay proxy config response."
          schema:
            $ref: "#/definitions/RelayProxyConfig"
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Relay proxy configurations"
      summary: "Delete a relay proxy configuration by ID."
      operationId: "deleteRelayProxyConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "The relay proxy configuration ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        "204":
          description: "Action completed successfully."
        "400":
          description: "Invalid request body."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Relay proxy configurations"
      summary: "Modify a relay proxy configuration by ID."
      operationId: "patchRelayProxyConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "The relay proxy configuration ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        "200":
          description: "Relay proxy config response."
          schema:
            $ref: "#/definitions/RelayProxyConfig"
        "400":
          description: "Invalid request body."
        "404":
          description: "Invalid resource specifier."
        "409":
          description: "Status conflict."
  /account/relay-auto-configs/{id}/reset:
    post:
      tags:
      - "Relay proxy configurations"
      summary: "Reset a relay proxy configuration's secret key with an optional expiry\
        \ time for the old key."
      operationId: "resetRelayProxyConfig"
      parameters:
      - name: "id"
        in: "path"
        description: "The relay proxy configuration ID"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "expiry"
        in: "query"
        description: "An expiration time for the old relay proxy configuration key,\
          \ expressed as a Unix epoch time in milliseconds. By default, the relay\
          \ proxy configuration will expire immediately"
        required: false
        type: "integer"
        format: "int64"
        x-exportParamName: "Expiry"
        x-optionalDataType: "Int64"
      responses:
        "200":
          description: "Relay proxy config response."
          schema:
            $ref: "#/definitions/RelayProxyConfig"
        "400":
          description: "Invalid request body."
        "404":
          description: "Invalid resource specifier."
  /:
    get:
      tags:
      - "Root"
      description: "You can issue a GET request to the root resource to find all of\
        \ the resource categories supported by the API."
      operationId: "getRoot"
      parameters: []
      responses:
        "200":
          description: "A list of links to available resources in the API."
          schema:
            $ref: "#/definitions/Links"
        "401":
          description: "Invalid access token."
  /integrations:
    get:
      tags:
      - "Integrations"
      summary: "Get a list of all configured audit log event integrations associated\
        \ with this account."
      operationId: "getIntegrations"
      parameters: []
      responses:
        "200":
          description: "Integrations response."
          schema:
            $ref: "#/definitions/Integrations"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
  /integrations/{integrationKey}:
    get:
      tags:
      - "Integrations"
      summary: "Get a list of all configured integrations of a given kind."
      operationId: "getIntegrationSubscriptions"
      parameters:
      - name: "integrationKey"
        in: "path"
        description: "The key used to specify the integration kind."
        required: true
        type: "string"
        x-exportParamName: "IntegrationKey"
      responses:
        "200":
          description: "Integrations response."
          schema:
            $ref: "#/definitions/Integration"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
        "404":
          description: "Invalid resource specifier."
    post:
      tags:
      - "Integrations"
      summary: "Create a new integration subscription of a given kind."
      operationId: "postIntegrationSubscription"
      parameters:
      - name: "integrationKey"
        in: "path"
        description: "The key used to specify the integration kind."
        required: true
        type: "string"
        x-exportParamName: "IntegrationKey"
      - in: "body"
        name: "subscriptionBody"
        description: "Create a new integration subscription."
        required: true
        schema:
          $ref: "#/definitions/subscriptionBody"
        x-exportParamName: "SubscriptionBody"
      responses:
        "201":
          description: "Integrations response."
          schema:
            $ref: "#/definitions/IntegrationSubscription"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "409":
          description: "Status conflict."
  /integrations/{integrationKey}/{integrationId}:
    get:
      tags:
      - "Integrations"
      summary: "Get a single integration subscription by ID."
      operationId: "getIntegrationSubscription"
      parameters:
      - name: "integrationKey"
        in: "path"
        description: "The key used to specify the integration kind."
        required: true
        type: "string"
        x-exportParamName: "IntegrationKey"
      - name: "integrationId"
        in: "path"
        description: "The integration ID."
        required: true
        type: "string"
        x-exportParamName: "IntegrationId"
      responses:
        "200":
          description: "Integrations response."
          schema:
            $ref: "#/definitions/IntegrationSubscription"
        "403":
          description: "This is a beta API, you must pass beta in the LD-API-Version\
            \ header to use it."
          schema:
            $ref: "#/definitions/UsageError"
        "404":
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Integrations"
      summary: "Delete an integration subscription by ID."
      operationId: "deleteIntegrationSubscription"
      parameters:
      - name: "integrationKey"
        in: "path"
        description: "The key used to specify the integration kind."
        required: true
        type: "string"
        x-exportParamName: "IntegrationKey"
      - name: "integrationId"
        in: "path"
        description: "The integration ID."
        required: true
        type: "string"
        x-exportParamName: "IntegrationId"
      responses:
        "204":
          description: "Action completed successfully."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Integrations"
      summary: "Modify an integration subscription by ID."
      operationId: "patchIntegrationSubscription"
      parameters:
      - name: "integrationKey"
        in: "path"
        description: "The key used to specify the integration kind."
        required: true
        type: "string"
        x-exportParamName: "IntegrationKey"
      - name: "integrationId"
        in: "path"
        description: "The integration ID."
        required: true
        type: "string"
        x-exportParamName: "IntegrationId"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        "200":
          description: "Integrations response."
          schema:
            $ref: "#/definitions/IntegrationSubscription"
        "400":
          description: "Invalid request body."
        "401":
          description: "Invalid access token."
        "404":
          description: "Invalid resource specifier."
securityDefinitions:
  Token:
    description: "https://app.launchdarkly.com/settings#/tokens"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Link:
    type: "object"
    properties:
      href:
        type: "string"
        example: "/api/v2/endpoint"
      type:
        type: "string"
        example: "application/json"
    example:
      href: "/api/v2/endpoint"
      type: "application/json"
  Links:
    type: "object"
    properties:
      self:
        $ref: "#/definitions/Link"
      next:
        $ref: "#/definitions/Link"
    example:
      next:
        href: "/api/v2/endpoint"
        type: "application/json"
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
  Site:
    type: "object"
    properties:
      href:
        type: "string"
        example: "/features/sort.order"
      type:
        type: "string"
        example: "text/html"
    example:
      href: "/features/sort.order"
      type: "text/html"
  Webhook:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      url:
        type: "string"
        example: "https://example.com/example"
        description: "The URL of the remote webhook."
      secret:
        type: "string"
        example: "frobozz"
        description: "If defined, the webhooks post request will include a X-LD-Signature\
          \ header whose value will contain an HMAC SHA256 hex digest of the webhook\
          \ payload, using the secret as the key."
      "on":
        type: "boolean"
        example: true
        description: "Whether this webhook is enabled or not."
      name:
        type: "string"
        example: "Example hook"
        description: "The name of the webhook."
      statements:
        type: "array"
        items:
          $ref: "#/definitions/Statement"
      tags:
        type: "array"
        description: "Tags assigned to this webhook."
        items:
          type: "string"
          example: ""
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "Example hook"
      statements:
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "allow"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "allow"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
      _id: "5a580a01b4ff89217bdf9dc1"
      secret: "frobozz"
      url: "https://example.com/example"
      "on": true
      tags:
      - ""
      - ""
  Webhooks:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Webhook"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Example hook"
        statements:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        _id: "5a580a01b4ff89217bdf9dc1"
        secret: "frobozz"
        url: "https://example.com/example"
        "on": true
        tags:
        - ""
        - ""
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Example hook"
        statements:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        _id: "5a580a01b4ff89217bdf9dc1"
        secret: "frobozz"
        url: "https://example.com/example"
        "on": true
        tags:
        - ""
        - ""
  FeatureFlag:
    type: "object"
    properties:
      key:
        type: "string"
        example: "test-feature"
      name:
        type: "string"
        example: "Test Feature"
        description: "Name of the feature flag."
      description:
        type: "string"
        example: "This flag controls whether test feature is turned on or not."
        description: "Description of the feature flag."
      kind:
        type: "string"
        example: "boolean"
        description: "Whether the feature flag is a boolean flag or multivariate."
      creationDate:
        type: "integer"
        format: "int64"
        example: 1443652232590
        description: "A unix epoch time in milliseconds specifying the creation time\
          \ of this flag."
      includeInSnippet:
        type: "boolean"
        example: false
      temporary:
        type: "boolean"
        example: false
        description: "Whether or not this flag is temporary."
      maintainerId:
        type: "string"
        example: "561c579cd8fd5c2704000001"
        description: "The ID of the member that should maintain this flag."
      tags:
        type: "array"
        example: []
        description: "An array of tags for this feature flag."
        items:
          type: "string"
      variations:
        type: "array"
        example:
        - value: "a"
        - value: "b"
        description: "The variations for this feature flag."
        items:
          $ref: "#/definitions/Variation"
      goalIds:
        type: "array"
        example:
        - "d7239405bd89c930e885aa76"
        - "405bc930e88d7239d895aa76"
        description: "An array goals from all environments associated with this feature\
          \ flag"
        items:
          type: "string"
      _version:
        type: "integer"
        example: 23
      customProperties:
        type: "object"
        example:
          bugs:
            name: "Issue tracker ids"
            value:
            - "123"
            - "456"
          deprecated:
            name: "Deprecated Date"
            value: []
        description: "A mapping of keys to CustomProperty entries."
        additionalProperties:
          $ref: "#/definitions/CustomProperty"
      _links:
        $ref: "#/definitions/Links"
      _maintainer:
        $ref: "#/definitions/Member"
      environments:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/FeatureFlagConfig"
      archivedDate:
        type: "integer"
        format: "int64"
        example: 1443652232590
        description: "A unix epoch time in milliseconds specifying the archived time\
          \ of this flag."
      archived:
        type: "boolean"
        example: false
        description: "Whether or not this flag is archived."
      clientSideAvailability:
        $ref: "#/definitions/ClientSideAvailability"
      defaults:
        $ref: "#/definitions/Defaults"
    example:
      archivedDate: 1443652232590
      temporary: false
      _maintainer:
        firstName: "Alan"
        lastName: "Turing"
        _verified: true
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        _lastSeen: 1469326565348
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        _lastSeenMetadata:
          tokenId: "5fd2a1ee05600316d5cb3e96"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
      clientSideAvailability:
        usingEnvironmentId: true
        usingMobileKey: true
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      environments:
        key:
          salt: "YWx0ZXJuYXRlLnBhZ2U="
          rules:
          - rollout:
              variations:
              - weight: 5
                variation: 1
              - weight: 5
                variation: 1
              bucketBy: "bucketBy"
            clauses:
            - op: "in"
              negate: true
              values:
              - "Top Customers"
              - "Top Customers"
              _id: "_id"
              attribute: "groups"
            - op: "in"
              negate: true
              values:
              - "Top Customers"
              - "Top Customers"
              _id: "_id"
              attribute: "groups"
            description: "description"
            _id: "_id"
            trackEvents: true
            variation: 6
          - rollout:
              variations:
              - weight: 5
                variation: 1
              - weight: 5
                variation: 1
              bucketBy: "bucketBy"
            clauses:
            - op: "in"
              negate: true
              values:
              - "Top Customers"
              - "Top Customers"
              _id: "_id"
              attribute: "groups"
            - op: "in"
              negate: true
              values:
              - "Top Customers"
              - "Top Customers"
              _id: "_id"
              attribute: "groups"
            description: "description"
            _id: "_id"
            trackEvents: true
            variation: 6
          version: 65
          targets:
          - values:
            - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
            - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
            variation: 0
          - values:
            - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
            - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
            variation: 0
          prerequisites:
          - key: "key"
            variation: 7
          - key: "key"
            variation: 7
          archived: true
          trackEventsFallthrough: true
          _environmentName: "_environmentName"
          _site:
            href: "/features/sort.order"
            type: "text/html"
          sel: "45501b9314dc4641841af774cb038b96"
          lastModified: 1469326565348
          trackEvents: false
          fallthrough:
            rollout:
              variations:
              - weight: 5
                variation: 1
              - weight: 5
                variation: 1
              bucketBy: "bucketBy"
            variation: 5
          offVariation: 2
          "on": true
      kind: "boolean"
      description: "This flag controls whether test feature is turned on or not."
      creationDate: 1443652232590
      tags: []
      goalIds:
      - "d7239405bd89c930e885aa76"
      - "405bc930e88d7239d895aa76"
      archived: false
      includeInSnippet: false
      maintainerId: "561c579cd8fd5c2704000001"
      customProperties:
        bugs:
          name: "Issue tracker ids"
          value:
          - "123"
          - "456"
        deprecated:
          name: "Deprecated Date"
          value: []
      defaults:
        onVariation: 9
        offVariation: 3
      variations:
      - value: "a"
      - value: "b"
      name: "Test Feature"
      _version: 23
      key: "test-feature"
  FeatureFlags:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/FeatureFlag"
      totalCount:
        type: "number"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      totalCount: 2.027123023002321833274663731572218239307403564453125
      items:
      - archivedDate: 1443652232590
        temporary: false
        _maintainer:
          firstName: "Alan"
          lastName: "Turing"
          _verified: true
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          _lastSeen: 1469326565348
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          _lastSeenMetadata:
            tokenId: "5fd2a1ee05600316d5cb3e96"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        clientSideAvailability:
          usingEnvironmentId: true
          usingMobileKey: true
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        environments:
          key:
            salt: "YWx0ZXJuYXRlLnBhZ2U="
            rules:
            - rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
                bucketBy: "bucketBy"
              clauses:
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                _id: "_id"
                attribute: "groups"
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                _id: "_id"
                attribute: "groups"
              description: "description"
              _id: "_id"
              trackEvents: true
              variation: 6
            - rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
                bucketBy: "bucketBy"
              clauses:
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                _id: "_id"
                attribute: "groups"
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                _id: "_id"
                attribute: "groups"
              description: "description"
              _id: "_id"
              trackEvents: true
              variation: 6
            version: 65
            targets:
            - values:
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              variation: 0
            - values:
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              variation: 0
            prerequisites:
            - key: "key"
              variation: 7
            - key: "key"
              variation: 7
            archived: true
            trackEventsFallthrough: true
            _environmentName: "_environmentName"
            _site:
              href: "/features/sort.order"
              type: "text/html"
            sel: "45501b9314dc4641841af774cb038b96"
            lastModified: 1469326565348
            trackEvents: false
            fallthrough:
              rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
                bucketBy: "bucketBy"
              variation: 5
            offVariation: 2
            "on": true
        kind: "boolean"
        description: "This flag controls whether test feature is turned on or not."
        creationDate: 1443652232590
        tags: []
        goalIds:
        - "d7239405bd89c930e885aa76"
        - "405bc930e88d7239d895aa76"
        archived: false
        includeInSnippet: false
        maintainerId: "561c579cd8fd5c2704000001"
        customProperties:
          bugs:
            name: "Issue tracker ids"
            value:
            - "123"
            - "456"
          deprecated:
            name: "Deprecated Date"
            value: []
        defaults:
          onVariation: 9
          offVariation: 3
        variations:
        - value: "a"
        - value: "b"
        name: "Test Feature"
        _version: 23
        key: "test-feature"
      - archivedDate: 1443652232590
        temporary: false
        _maintainer:
          firstName: "Alan"
          lastName: "Turing"
          _verified: true
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          _lastSeen: 1469326565348
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          _lastSeenMetadata:
            tokenId: "5fd2a1ee05600316d5cb3e96"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        clientSideAvailability:
          usingEnvironmentId: true
          usingMobileKey: true
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        environments:
          key:
            salt: "YWx0ZXJuYXRlLnBhZ2U="
            rules:
            - rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
                bucketBy: "bucketBy"
              clauses:
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                _id: "_id"
                attribute: "groups"
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                _id: "_id"
                attribute: "groups"
              description: "description"
              _id: "_id"
              trackEvents: true
              variation: 6
            - rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
                bucketBy: "bucketBy"
              clauses:
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                _id: "_id"
                attribute: "groups"
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                _id: "_id"
                attribute: "groups"
              description: "description"
              _id: "_id"
              trackEvents: true
              variation: 6
            version: 65
            targets:
            - values:
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              variation: 0
            - values:
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              variation: 0
            prerequisites:
            - key: "key"
              variation: 7
            - key: "key"
              variation: 7
            archived: true
            trackEventsFallthrough: true
            _environmentName: "_environmentName"
            _site:
              href: "/features/sort.order"
              type: "text/html"
            sel: "45501b9314dc4641841af774cb038b96"
            lastModified: 1469326565348
            trackEvents: false
            fallthrough:
              rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
                bucketBy: "bucketBy"
              variation: 5
            offVariation: 2
            "on": true
        kind: "boolean"
        description: "This flag controls whether test feature is turned on or not."
        creationDate: 1443652232590
        tags: []
        goalIds:
        - "d7239405bd89c930e885aa76"
        - "405bc930e88d7239d895aa76"
        archived: false
        includeInSnippet: false
        maintainerId: "561c579cd8fd5c2704000001"
        customProperties:
          bugs:
            name: "Issue tracker ids"
            value:
            - "123"
            - "456"
          deprecated:
            name: "Deprecated Date"
            value: []
        defaults:
          onVariation: 9
          offVariation: 3
        variations:
        - value: "a"
        - value: "b"
        name: "Test Feature"
        _version: 23
        key: "test-feature"
  Member:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      role:
        $ref: "#/definitions/Role"
      email:
        type: "string"
        example: "user@launchdarkly.com"
      firstName:
        type: "string"
        example: "Alan"
      lastName:
        type: "string"
        example: "Turing"
      _verified:
        type: "boolean"
      _pendingInvite:
        type: "boolean"
      isBeta:
        type: "boolean"
      customRoles:
        type: "array"
        items:
          type: "string"
          example: "5a580a01b4ff89217bdf9dc1"
          description: "The unique resource id."
      _lastSeen:
        type: "integer"
        format: "int64"
        example: 1469326565348
        description: "A unix epoch time in milliseconds specifying the last time this\
          \ member was active in LaunchDarkly."
      _lastSeenMetadata:
        $ref: "#/definitions/Member__lastSeenMetadata"
    example:
      firstName: "Alan"
      lastName: "Turing"
      _verified: true
      role: {}
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _pendingInvite: true
      _lastSeen: 1469326565348
      isBeta: true
      _id: "5a580a01b4ff89217bdf9dc1"
      _lastSeenMetadata:
        tokenId: "5fd2a1ee05600316d5cb3e96"
      email: "user@launchdarkly.com"
      customRoles:
      - "5a580a01b4ff89217bdf9dc1"
      - "5a580a01b4ff89217bdf9dc1"
  Members:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Member"
      totalCount:
        type: "number"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      totalCount: 0.80082819046101150206595775671303272247314453125
      items:
      - firstName: "Alan"
        lastName: "Turing"
        _verified: true
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        _lastSeen: 1469326565348
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        _lastSeenMetadata:
          tokenId: "5fd2a1ee05600316d5cb3e96"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
      - firstName: "Alan"
        lastName: "Turing"
        _verified: true
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        _lastSeen: 1469326565348
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        _lastSeenMetadata:
          tokenId: "5fd2a1ee05600316d5cb3e96"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
  FeatureFlagConfig:
    type: "object"
    properties:
      "on":
        type: "boolean"
      archived:
        type: "boolean"
      salt:
        type: "string"
        example: "YWx0ZXJuYXRlLnBhZ2U="
      sel:
        type: "string"
        example: "45501b9314dc4641841af774cb038b96"
      lastModified:
        type: "integer"
        format: "int64"
        example: 1469326565348
      version:
        type: "integer"
        example: 65
      targets:
        type: "array"
        items:
          $ref: "#/definitions/Target"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/Rule"
      fallthrough:
        $ref: "#/definitions/Fallthrough"
      offVariation:
        type: "integer"
      prerequisites:
        type: "array"
        items:
          $ref: "#/definitions/Prerequisite"
      trackEvents:
        type: "boolean"
        example: false
        description: "Set to true to send detailed event information for this flag."
      trackEventsFallthrough:
        type: "boolean"
        example: true
        description: "Set to true to send detailed event information when targeting\
          \ is enabled but no individual targeting rule is matched."
      _site:
        $ref: "#/definitions/Site"
      _environmentName:
        type: "string"
    example:
      salt: "YWx0ZXJuYXRlLnBhZ2U="
      rules:
      - rollout:
          variations:
          - weight: 5
            variation: 1
          - weight: 5
            variation: 1
          bucketBy: "bucketBy"
        clauses:
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          _id: "_id"
          attribute: "groups"
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          _id: "_id"
          attribute: "groups"
        description: "description"
        _id: "_id"
        trackEvents: true
        variation: 6
      - rollout:
          variations:
          - weight: 5
            variation: 1
          - weight: 5
            variation: 1
          bucketBy: "bucketBy"
        clauses:
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          _id: "_id"
          attribute: "groups"
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          _id: "_id"
          attribute: "groups"
        description: "description"
        _id: "_id"
        trackEvents: true
        variation: 6
      version: 65
      targets:
      - values:
        - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
        - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
        variation: 0
      - values:
        - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
        - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
        variation: 0
      prerequisites:
      - key: "key"
        variation: 7
      - key: "key"
        variation: 7
      archived: true
      trackEventsFallthrough: true
      _environmentName: "_environmentName"
      _site:
        href: "/features/sort.order"
        type: "text/html"
      sel: "45501b9314dc4641841af774cb038b96"
      lastModified: 1469326565348
      trackEvents: false
      fallthrough:
        rollout:
          variations:
          - weight: 5
            variation: 1
          - weight: 5
            variation: 1
          bucketBy: "bucketBy"
        variation: 5
      offVariation: 2
      "on": true
  Target:
    type: "object"
    properties:
      values:
        type: "array"
        items:
          type: "string"
          example: "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
      variation:
        type: "integer"
    example:
      values:
      - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
      - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
      variation: 0
  Rule:
    type: "object"
    properties:
      _id:
        type: "string"
      variation:
        type: "integer"
      trackEvents:
        type: "boolean"
      rollout:
        $ref: "#/definitions/Rollout"
      clauses:
        type: "array"
        items:
          $ref: "#/definitions/Clause"
      description:
        type: "string"
    example:
      rollout:
        variations:
        - weight: 5
          variation: 1
        - weight: 5
          variation: 1
        bucketBy: "bucketBy"
      clauses:
      - op: "in"
        negate: true
        values:
        - "Top Customers"
        - "Top Customers"
        _id: "_id"
        attribute: "groups"
      - op: "in"
        negate: true
        values:
        - "Top Customers"
        - "Top Customers"
        _id: "_id"
        attribute: "groups"
      description: "description"
      _id: "_id"
      trackEvents: true
      variation: 6
  Fallthrough:
    type: "object"
    properties:
      variation:
        type: "integer"
      rollout:
        $ref: "#/definitions/Rollout"
    example:
      rollout:
        variations:
        - weight: 5
          variation: 1
        - weight: 5
          variation: 1
        bucketBy: "bucketBy"
      variation: 5
  Rollout:
    type: "object"
    properties:
      bucketBy:
        type: "string"
      variations:
        type: "array"
        items:
          $ref: "#/definitions/WeightedVariation"
    example:
      variations:
      - weight: 5
        variation: 1
      - weight: 5
        variation: 1
      bucketBy: "bucketBy"
  WeightedVariation:
    type: "object"
    properties:
      variation:
        type: "integer"
      weight:
        type: "integer"
    example:
      weight: 5
      variation: 1
  Clause:
    type: "object"
    properties:
      _id:
        type: "string"
      attribute:
        type: "string"
        example: "groups"
      op:
        type: "string"
        example: "in"
      values:
        type: "array"
        items:
          type: "object"
          example: "Top Customers"
          properties: {}
      negate:
        type: "boolean"
    example:
      op: "in"
      negate: true
      values:
      - "Top Customers"
      - "Top Customers"
      _id: "_id"
      attribute: "groups"
  Variation:
    type: "object"
    required:
    - "value"
    properties:
      _id:
        type: "string"
        example: "24b32dd3-0ba6-46ee-86af-230eebf3c7cb"
      name:
        type: "string"
        example: "True"
      description:
        type: "string"
        example: "The true variation"
      value:
        type: "object"
        properties: {}
  Defaults:
    type: "object"
    required:
    - "offVariation"
    - "onVariation"
    properties:
      onVariation:
        type: "integer"
        description: "The index of the variation to be served when a flag's targeting\
          \ is on (default variation)."
      offVariation:
        type: "integer"
        description: "The index of the variation to be served when a flag is off."
    description: "Default values to be used when a new environment is created."
    example:
      onVariation: 9
      offVariation: 3
  Prerequisite:
    type: "object"
    properties:
      key:
        type: "string"
      variation:
        type: "integer"
    example:
      key: "key"
      variation: 7
  FeatureFlagScheduledChanges:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/FeatureFlagScheduledChange"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - instructions: ""
        executionDate: 0
        _id: "_id"
        _version: 6
      - instructions: ""
        executionDate: 0
        _id: "_id"
        _version: 6
  FeatureFlagScheduledChange:
    type: "object"
    properties:
      executionDate:
        type: "integer"
        description: "A unix epoch time in milliseconds specifying the date the scheduled\
          \ changes will be applied"
      _version:
        type: "integer"
      _id:
        type: "string"
      instructions:
        $ref: "#/definitions/SemanticPatchInstruction"
    example:
      instructions: ""
      executionDate: 0
      _id: "_id"
      _version: 6
  FeatureFlagScheduledChangesConflicts:
    type: "object"
    properties:
      instructions:
        type: "array"
        items:
          $ref: "#/definitions/FeatureFlagScheduledChangesConflicts_instructions"
    example:
      instructions:
      - kind: "removeUserTargets"
        conflicts:
        - reason: "reason"
          _id: "_id"
        - reason: "reason"
          _id: "_id"
      - kind: "removeUserTargets"
        conflicts:
        - reason: "reason"
          _id: "_id"
        - reason: "reason"
          _id: "_id"
  ScheduledChangesFeatureFlagConflict:
    type: "object"
    properties:
      _id:
        type: "string"
        description: "Feature flag scheduled change id this change will conflict with"
      reason:
        type: "string"
        description: "Feature flag scheduled change conflict reason"
    example:
      reason: "reason"
      _id: "_id"
  ApprovalRequests:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/ApprovalRequest"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - allReviews:
        - _id: "5a580a01b4ff89217bdf9dc1"
          creationDate: 5
          memberId: "5a580a01b4ff89217bdf9dc1"
        - _id: "5a580a01b4ff89217bdf9dc1"
          creationDate: 5
          memberId: "5a580a01b4ff89217bdf9dc1"
        instructions: ""
        notifyMemberIds:
        - "memberId"
        - "memberId2"
        executionDate: 5
        appliedDate: 1
        creationDate: 6
        requestorId: "requestorId"
        reviewStatus: {}
        appliedByMemberID: "appliedByMemberID"
        operatingOnId: "operatingOnId"
        _id: "5a580a01b4ff89217bdf9dc1"
        _version: 0
        status: "pending"
      - allReviews:
        - _id: "5a580a01b4ff89217bdf9dc1"
          creationDate: 5
          memberId: "5a580a01b4ff89217bdf9dc1"
        - _id: "5a580a01b4ff89217bdf9dc1"
          creationDate: 5
          memberId: "5a580a01b4ff89217bdf9dc1"
        instructions: ""
        notifyMemberIds:
        - "memberId"
        - "memberId2"
        executionDate: 5
        appliedDate: 1
        creationDate: 6
        requestorId: "requestorId"
        reviewStatus: {}
        appliedByMemberID: "appliedByMemberID"
        operatingOnId: "operatingOnId"
        _id: "5a580a01b4ff89217bdf9dc1"
        _version: 0
        status: "pending"
  ApprovalRequest:
    type: "object"
    properties:
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      _version:
        type: "integer"
      creationDate:
        type: "integer"
        description: "A unix epoch time in milliseconds specifying the date the approval\
          \ request was requested"
      requestorId:
        type: "string"
        description: "The id of the member that requested the change"
      reviewStatus:
        $ref: "#/definitions/ApprovalRequestReviewStatus"
      status:
        type: "string"
        description: "| Name      | Description |\n| ---------:| ----------- |\n|\
          \ pending   | the approval request has not been applied yet |\n| completed\
          \ | the approval request has been applied successfully |\n| scheduled |\
          \ the approval request for a scheduled change has been applied successfully\
          \ |\n| failed    | the approval request has been applied but the changes\
          \ were not applied successfully |\n"
        enum:
        - "pending"
        - "completed"
        - "scheduled"
        - "failed"
      appliedByMemberID:
        type: "string"
        description: "The id of the member that applied the approval request"
      appliedDate:
        type: "integer"
        description: "A unix epoch time in milliseconds specifying the date the approval\
          \ request was applied"
      allReviews:
        type: "array"
        items:
          $ref: "#/definitions/ApprovalRequestReview"
      notifyMemberIds:
        type: "array"
        example:
        - "memberId"
        - "memberId2"
        items:
          type: "string"
      instructions:
        $ref: "#/definitions/SemanticPatchInstruction"
      executionDate:
        type: "integer"
        format: "int64"
        description: "Timestamp for when instructions will be executed"
      operatingOnId:
        type: "string"
        description: "ID of scheduled change to edit or delete"
    example:
      allReviews:
      - _id: "5a580a01b4ff89217bdf9dc1"
        creationDate: 5
        memberId: "5a580a01b4ff89217bdf9dc1"
      - _id: "5a580a01b4ff89217bdf9dc1"
        creationDate: 5
        memberId: "5a580a01b4ff89217bdf9dc1"
      instructions: ""
      notifyMemberIds:
      - "memberId"
      - "memberId2"
      executionDate: 5
      appliedDate: 1
      creationDate: 6
      requestorId: "requestorId"
      reviewStatus: {}
      appliedByMemberID: "appliedByMemberID"
      operatingOnId: "operatingOnId"
      _id: "5a580a01b4ff89217bdf9dc1"
      _version: 0
      status: "pending"
  ApprovalRequestReview:
    type: "object"
    properties:
      creationDate:
        type: "integer"
        description: "A unix epoch time in milliseconds specifying the date the approval\
          \ request was reviewed"
      kind:
        $ref: "#/definitions/ApprovalRequestReviewStatus"
      memberId:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
    example:
      _id: "5a580a01b4ff89217bdf9dc1"
      creationDate: 5
      memberId: "5a580a01b4ff89217bdf9dc1"
  ApprovalRequestReviewStatus:
    type: "string"
    description: "| Name     | Description |\n| --------:| ----------- |\n| pending\
      \  | the approval request has not been reviewed yet |\n| approved | the approval\
      \ request has been approved and can now be applied |\n| declined | the approval\
      \ request has been declined and cannot be applied |\n"
    enum:
    - "pending"
    - "approved"
    - "declined"
  ClientSideAvailability:
    type: "object"
    properties:
      usingEnvironmentId:
        type: "boolean"
        description: "When set to true, this flag will be available to SDKs using\
          \ the client-side id."
      usingMobileKey:
        type: "boolean"
        description: "When set to true, this flag will be available to SDKS using\
          \ a mobile key."
    example:
      usingEnvironmentId: true
      usingMobileKey: true
  FeatureFlagStatus:
    type: "object"
    properties:
      name:
        type: "string"
        description: "| Name     | Description |\n| --------:| ----------- |\n| new\
          \      | the feature flag was created within the last 7 days, and has not\
          \ been requested yet |\n| active   | the feature flag was requested by your\
          \ servers or clients within the last 7 days |\n| inactive | the feature\
          \ flag was created more than 7 days ago, and hasn't been requested by your\
          \ servers or clients within the past 7 days |\n| launched | one variation\
          \ of the feature flag has been rolled out to all your users for at least\
          \ 7 days |\n"
        enum:
        - "new"
        - "active"
        - "inactive"
        - "launched"
      lastRequested:
        type: "string"
        example: "2016-08-16T21:10:11.886Z"
      default:
        type: "object"
        properties: {}
      _links:
        $ref: "#/definitions/FeatureFlagStatusLinks"
    example:
      lastRequested: "2016-08-16T21:10:11.886Z"
      default: "{}"
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "new"
  FeatureFlagStatuses:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/FeatureFlagStatusLinks"
      items:
        type: "array"
        items:
          $ref: "#/definitions/FeatureFlagStatus"
    example:
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - lastRequested: "2016-08-16T21:10:11.886Z"
        default: "{}"
        _links:
          parent:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "new"
      - lastRequested: "2016-08-16T21:10:11.886Z"
        default: "{}"
        _links:
          parent:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "new"
  FeatureFlagStatusForQueriedEnvironment:
    type: "object"
    properties:
      name:
        type: "string"
        description: "| Name     | Description |\n| --------:| ----------- |\n| new\
          \      | the feature flag was created within the last 7 days, and has not\
          \ been requested yet |\n| active   | the feature flag was requested by your\
          \ servers or clients within the last 7 days |\n| inactive | the feature\
          \ flag was created more than 7 days ago, and hasn't been requested by your\
          \ servers or clients within the past 7 days |\n| launched | one variation\
          \ of the feature flag has been rolled out to all your users for at least\
          \ 7 days |\n"
        enum:
        - "new"
        - "active"
        - "inactive"
        - "launched"
      lastRequested:
        type: "string"
        example: "2016-08-16T21:10:11.886Z"
      default:
        type: "object"
        properties: {}
    example:
      lastRequested: "2016-08-16T21:10:11.886Z"
      default: "{}"
      name: "new"
  FeatureFlagStatusAcrossEnvironments:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/FeatureFlagStatusLinks"
      key:
        type: "string"
      environments:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/FeatureFlagStatusForQueriedEnvironment"
    example:
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      environments:
        key:
          lastRequested: "2016-08-16T21:10:11.886Z"
          default: "{}"
          name: "new"
      key: "key"
  FeatureFlagStatusLinks:
    type: "object"
    properties:
      parent:
        $ref: "#/definitions/Link"
      self:
        $ref: "#/definitions/Link"
    example:
      parent:
        href: "/api/v2/endpoint"
        type: "application/json"
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
  DependentFlagsByEnvironment:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/DependentFlag"
      _links:
        $ref: "#/definitions/DependentFlagsLinks"
      _site:
        $ref: "#/definitions/Site"
    example:
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _site:
        href: "/features/sort.order"
        type: "text/html"
      items:
      - _links:
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _site:
          href: "/features/sort.order"
          type: "text/html"
        name: "name"
        key: "key"
      - _links:
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _site:
          href: "/features/sort.order"
          type: "text/html"
        name: "name"
        key: "key"
  DependentFlag:
    type: "object"
    properties:
      name:
        type: "string"
      key:
        type: "string"
      _links:
        $ref: "#/definitions/DependentFlag__links"
      _site:
        $ref: "#/definitions/Site"
    example:
      _links:
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _site:
        href: "/features/sort.order"
        type: "text/html"
      name: "name"
      key: "key"
  DependentFlagsLinks:
    type: "object"
    properties:
      parent:
        $ref: "#/definitions/Link"
      self:
        $ref: "#/definitions/Link"
    example:
      parent:
        href: "/api/v2/endpoint"
        type: "application/json"
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
  MultiEnvironmentDependentFlags:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/MultiEnvironmentDependentFlag"
      _links:
        $ref: "#/definitions/DependentFlagsLinks"
      _site:
        $ref: "#/definitions/Site"
    example:
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _site:
        href: "/features/sort.order"
        type: "text/html"
      items:
      - environments:
        - _links:
            flagLink:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _site:
            href: "/features/sort.order"
            type: "text/html"
          name: "name"
          key: "key"
        - _links:
            flagLink:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _site:
            href: "/features/sort.order"
            type: "text/html"
          name: "name"
          key: "key"
        _links:
          parent:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _site:
          href: "/features/sort.order"
          type: "text/html"
        name: "name"
        key: "key"
      - environments:
        - _links:
            flagLink:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _site:
            href: "/features/sort.order"
            type: "text/html"
          name: "name"
          key: "key"
        - _links:
            flagLink:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _site:
            href: "/features/sort.order"
            type: "text/html"
          name: "name"
          key: "key"
        _links:
          parent:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _site:
          href: "/features/sort.order"
          type: "text/html"
        name: "name"
        key: "key"
  MultiEnvironmentDependentFlag:
    type: "object"
    properties:
      name:
        type: "string"
      key:
        type: "string"
      environments:
        type: "array"
        items:
          $ref: "#/definitions/DependentFlagEnvironment"
      _links:
        $ref: "#/definitions/DependentFlagsLinks"
      _site:
        $ref: "#/definitions/Site"
    example:
      environments:
      - _links:
          flagLink:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _site:
          href: "/features/sort.order"
          type: "text/html"
        name: "name"
        key: "key"
      - _links:
          flagLink:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _site:
          href: "/features/sort.order"
          type: "text/html"
        name: "name"
        key: "key"
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _site:
        href: "/features/sort.order"
        type: "text/html"
      name: "name"
      key: "key"
  DependentFlagEnvironment:
    type: "object"
    properties:
      name:
        type: "string"
      key:
        type: "string"
      _links:
        $ref: "#/definitions/DependentFlagEnvironment__links"
      _site:
        $ref: "#/definitions/Site"
    example:
      _links:
        flagLink:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _site:
        href: "/features/sort.order"
        type: "text/html"
      name: "name"
      key: "key"
  UserTargetingExpirationForFlags:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/UserTargetingExpirationForFlag"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - _resourceId:
          projectKey: "projectKey"
          kind: "kind"
          flagKey: "flagKey"
          key: "key"
          environmentKey: "environmentKey"
        variationId: "variationId"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _id: "_id"
        _version: 0
        userKey: "userKey"
        expirationDate: 1735689600000
      - _resourceId:
          projectKey: "projectKey"
          kind: "kind"
          flagKey: "flagKey"
          key: "key"
          environmentKey: "environmentKey"
        variationId: "variationId"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _id: "_id"
        _version: 0
        userKey: "userKey"
        expirationDate: 1735689600000
  UserTargetingExpirationOnFlagsForUser:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/UserTargetingExpirationForFlag"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - _resourceId:
          projectKey: "projectKey"
          kind: "kind"
          flagKey: "flagKey"
          key: "key"
          environmentKey: "environmentKey"
        variationId: "variationId"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _id: "_id"
        _version: 0
        userKey: "userKey"
        expirationDate: 1735689600000
      - _resourceId:
          projectKey: "projectKey"
          kind: "kind"
          flagKey: "flagKey"
          key: "key"
          environmentKey: "environmentKey"
        variationId: "variationId"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _id: "_id"
        _version: 0
        userKey: "userKey"
        expirationDate: 1735689600000
  UserTargetingExpirationForFlag:
    type: "object"
    properties:
      expirationDate:
        type: "integer"
        format: "int64"
        example: 1735689600000
        description: "Unix epoch time in milliseconds specifying the expiration date"
      variationId:
        type: "string"
        description: "the ID of the variation that the user is targeted on a flag"
      userKey:
        type: "string"
        description: "Unique identifier for the user"
      _id:
        type: "string"
      _resourceId:
        $ref: "#/definitions/UserTargetingExpirationResourceIdForFlag"
      _links:
        $ref: "#/definitions/Links"
      _version:
        type: "integer"
    example:
      _resourceId:
        projectKey: "projectKey"
        kind: "kind"
        flagKey: "flagKey"
        key: "key"
        environmentKey: "environmentKey"
      variationId: "variationId"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _id: "_id"
      _version: 0
      userKey: "userKey"
      expirationDate: 1735689600000
  UserTargetingExpirationForSegment:
    type: "object"
    properties:
      expirationDate:
        type: "integer"
        format: "int64"
        example: 1735689600000
        description: "Unix epoch time in milliseconds specifying the expiration date"
      targetType:
        type: "string"
        description: "either the included or excluded variation that the user is targeted\
          \ on a segment"
      userKey:
        type: "string"
        description: "Unique identifier for the user"
      _id:
        type: "string"
      _resourceId:
        $ref: "#/definitions/UserTargetingExpirationResourceIdForFlag"
      _links:
        $ref: "#/definitions/Links"
      _version:
        type: "integer"
    example:
      _resourceId:
        projectKey: "projectKey"
        kind: "kind"
        flagKey: "flagKey"
        key: "key"
        environmentKey: "environmentKey"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      targetType: "targetType"
      _id: "_id"
      _version: 0
      userKey: "userKey"
      expirationDate: 1735689600000
  UserTargetingExpirationResourceIdForFlag:
    type: "object"
    properties:
      kind:
        type: "string"
      projectKey:
        type: "string"
      environmentKey:
        type: "string"
      flagKey:
        type: "string"
      key:
        type: "string"
    example:
      projectKey: "projectKey"
      kind: "kind"
      flagKey: "flagKey"
      key: "key"
      environmentKey: "environmentKey"
  UserSegment:
    type: "object"
    required:
    - "creationDate"
    - "key"
    - "name"
    properties:
      key:
        type: "string"
        example: "beta-testers"
        description: "Unique identifier for the user segment."
      name:
        type: "string"
        example: "Beta Testers"
        description: "Name of the user segment."
      description:
        type: "string"
        example: "Users in this segment can access beta features."
        description: "Description of the user segment."
      tags:
        type: "array"
        example:
        - "dev"
        - "ops"
        description: "An array of tags for this user segment."
        items:
          type: "string"
      creationDate:
        type: "integer"
        format: "int64"
        example: 1443652232590
        description: "A unix epoch time in milliseconds specifying the creation time\
          \ of this flag."
      included:
        type: "array"
        description: "An array of user keys that are included in this segment."
        items:
          type: "string"
      excluded:
        type: "array"
        description: "An array of user keys that should not be included in this segment,\
          \ unless they are also listed in \"included\"."
        items:
          type: "string"
      rules:
        type: "array"
        description: "An array of rules that can cause a user to be included in this\
          \ segment."
        items:
          $ref: "#/definitions/UserSegmentRule"
      unbounded:
        type: "boolean"
        example: false
        description: "Controls whether this is considered a \"big segment\" which\
          \ can support an unlimited numbers of users. Include/exclude lists sent\
          \ with this payload are not used in big segments. Contact your account manager\
          \ for early access to this feature."
      version:
        type: "integer"
      _links:
        $ref: "#/definitions/Links"
      _flags:
        type: "array"
        readOnly: true
        items:
          $ref: "#/definitions/FlagListItem"
    example:
      excluded:
      - "excluded"
      - "excluded"
      _flags:
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _site:
          href: "/features/sort.order"
          type: "text/html"
        name: "name"
        key: "key"
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _site:
          href: "/features/sort.order"
          type: "text/html"
        name: "name"
        key: "key"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "Beta Testers"
      description: "Users in this segment can access beta features."
      rules:
      - clauses:
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          _id: "_id"
          attribute: "groups"
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          _id: "_id"
          attribute: "groups"
        weight: 0
        bucketBy: "bucketBy"
      - clauses:
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          _id: "_id"
          attribute: "groups"
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          _id: "_id"
          attribute: "groups"
        weight: 0
        bucketBy: "bucketBy"
      creationDate: 1443652232590
      unbounded: false
      included:
      - "included"
      - "included"
      version: 6
      key: "beta-testers"
      tags:
      - "dev"
      - "ops"
  UserSegmentRule:
    type: "object"
    properties:
      clauses:
        type: "array"
        items:
          $ref: "#/definitions/Clause"
      weight:
        type: "integer"
      bucketBy:
        type: "string"
    example:
      clauses:
      - op: "in"
        negate: true
        values:
        - "Top Customers"
        - "Top Customers"
        _id: "_id"
        attribute: "groups"
      - op: "in"
        negate: true
        values:
        - "Top Customers"
        - "Top Customers"
        _id: "_id"
        attribute: "groups"
      weight: 0
      bucketBy: "bucketBy"
  UserSegments:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/UserSegment"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - excluded:
        - "excluded"
        - "excluded"
        _flags:
        - _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _site:
            href: "/features/sort.order"
            type: "text/html"
          name: "name"
          key: "key"
        - _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _site:
            href: "/features/sort.order"
            type: "text/html"
          name: "name"
          key: "key"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Beta Testers"
        description: "Users in this segment can access beta features."
        rules:
        - clauses:
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            _id: "_id"
            attribute: "groups"
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            _id: "_id"
            attribute: "groups"
          weight: 0
          bucketBy: "bucketBy"
        - clauses:
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            _id: "_id"
            attribute: "groups"
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            _id: "_id"
            attribute: "groups"
          weight: 0
          bucketBy: "bucketBy"
        creationDate: 1443652232590
        unbounded: false
        included:
        - "included"
        - "included"
        version: 6
        key: "beta-testers"
        tags:
        - "dev"
        - "ops"
      - excluded:
        - "excluded"
        - "excluded"
        _flags:
        - _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _site:
            href: "/features/sort.order"
            type: "text/html"
          name: "name"
          key: "key"
        - _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _site:
            href: "/features/sort.order"
            type: "text/html"
          name: "name"
          key: "key"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Beta Testers"
        description: "Users in this segment can access beta features."
        rules:
        - clauses:
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            _id: "_id"
            attribute: "groups"
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            _id: "_id"
            attribute: "groups"
          weight: 0
          bucketBy: "bucketBy"
        - clauses:
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            _id: "_id"
            attribute: "groups"
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            _id: "_id"
            attribute: "groups"
          weight: 0
          bucketBy: "bucketBy"
        creationDate: 1443652232590
        unbounded: false
        included:
        - "included"
        - "included"
        version: 6
        key: "beta-testers"
        tags:
        - "dev"
        - "ops"
  BigSegmentTargetChanges:
    type: "object"
    properties:
      add:
        type: "array"
        example:
        - "user@launchdarkly.com"
        description: "Users to add to this list of targets"
        items:
          type: "string"
      remove:
        type: "array"
        example: []
        description: "Users to remove from this list of targets"
        items:
          type: "string"
  Project:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      key:
        type: "string"
        example: "zentasks"
      name:
        type: "string"
        example: "Zentasks"
      includeInSnippetByDefault:
        type: "boolean"
        example: true
      environments:
        type: "array"
        items:
          $ref: "#/definitions/Environment"
      tags:
        type: "array"
        description: "An array of tags for this project."
        items:
          type: "string"
      defaultClientSideAvailability:
        $ref: "#/definitions/ClientSideAvailability"
    example:
      includeInSnippetByDefault: true
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      environments:
      - approvalSettings:
          serviceKind: "launchdarkly"
          canReviewOwnRequest: true
          requiredApprovalTags:
          - "requiredApprovalTags"
          - "requiredApprovalTags"
          canApplyDeclinedChanges: true
          minNumApprovals: 2
          required: true
        apiKey: "XXX"
        color: "417505"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        confirmChanges: false
        requireComments: false
        mobileKey: "XXX"
        defaultTrackEvents: false
        tags:
        - "tags"
        - "tags"
        name: "Production"
        defaultTtl: 0.0
        _id: "5a580a01b4ff89217bdf9dc1"
        secureMode: false
        key: "production"
      - approvalSettings:
          serviceKind: "launchdarkly"
          canReviewOwnRequest: true
          requiredApprovalTags:
          - "requiredApprovalTags"
          - "requiredApprovalTags"
          canApplyDeclinedChanges: true
          minNumApprovals: 2
          required: true
        apiKey: "XXX"
        color: "417505"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        confirmChanges: false
        requireComments: false
        mobileKey: "XXX"
        defaultTrackEvents: false
        tags:
        - "tags"
        - "tags"
        name: "Production"
        defaultTtl: 0.0
        _id: "5a580a01b4ff89217bdf9dc1"
        secureMode: false
        key: "production"
      defaultClientSideAvailability:
        usingEnvironmentId: true
        usingMobileKey: true
      name: "Zentasks"
      _id: "5a580a01b4ff89217bdf9dc1"
      key: "zentasks"
      tags:
      - "tags"
      - "tags"
  Projects:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Project"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - includeInSnippetByDefault: true
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        environments:
        - approvalSettings:
            serviceKind: "launchdarkly"
            canReviewOwnRequest: true
            requiredApprovalTags:
            - "requiredApprovalTags"
            - "requiredApprovalTags"
            canApplyDeclinedChanges: true
            minNumApprovals: 2
            required: true
          apiKey: "XXX"
          color: "417505"
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          confirmChanges: false
          requireComments: false
          mobileKey: "XXX"
          defaultTrackEvents: false
          tags:
          - "tags"
          - "tags"
          name: "Production"
          defaultTtl: 0.0
          _id: "5a580a01b4ff89217bdf9dc1"
          secureMode: false
          key: "production"
        - approvalSettings:
            serviceKind: "launchdarkly"
            canReviewOwnRequest: true
            requiredApprovalTags:
            - "requiredApprovalTags"
            - "requiredApprovalTags"
            canApplyDeclinedChanges: true
            minNumApprovals: 2
            required: true
          apiKey: "XXX"
          color: "417505"
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          confirmChanges: false
          requireComments: false
          mobileKey: "XXX"
          defaultTrackEvents: false
          tags:
          - "tags"
          - "tags"
          name: "Production"
          defaultTtl: 0.0
          _id: "5a580a01b4ff89217bdf9dc1"
          secureMode: false
          key: "production"
        defaultClientSideAvailability:
          usingEnvironmentId: true
          usingMobileKey: true
        name: "Zentasks"
        _id: "5a580a01b4ff89217bdf9dc1"
        key: "zentasks"
        tags:
        - "tags"
        - "tags"
      - includeInSnippetByDefault: true
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        environments:
        - approvalSettings:
            serviceKind: "launchdarkly"
            canReviewOwnRequest: true
            requiredApprovalTags:
            - "requiredApprovalTags"
            - "requiredApprovalTags"
            canApplyDeclinedChanges: true
            minNumApprovals: 2
            required: true
          apiKey: "XXX"
          color: "417505"
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          confirmChanges: false
          requireComments: false
          mobileKey: "XXX"
          defaultTrackEvents: false
          tags:
          - "tags"
          - "tags"
          name: "Production"
          defaultTtl: 0.0
          _id: "5a580a01b4ff89217bdf9dc1"
          secureMode: false
          key: "production"
        - approvalSettings:
            serviceKind: "launchdarkly"
            canReviewOwnRequest: true
            requiredApprovalTags:
            - "requiredApprovalTags"
            - "requiredApprovalTags"
            canApplyDeclinedChanges: true
            minNumApprovals: 2
            required: true
          apiKey: "XXX"
          color: "417505"
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          confirmChanges: false
          requireComments: false
          mobileKey: "XXX"
          defaultTrackEvents: false
          tags:
          - "tags"
          - "tags"
          name: "Production"
          defaultTtl: 0.0
          _id: "5a580a01b4ff89217bdf9dc1"
          secureMode: false
          key: "production"
        defaultClientSideAvailability:
          usingEnvironmentId: true
          usingMobileKey: true
        name: "Zentasks"
        _id: "5a580a01b4ff89217bdf9dc1"
        key: "zentasks"
        tags:
        - "tags"
        - "tags"
  Destination:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "37ed9aad-de0a-4665-932e-41c35587aeea"
        description: "Unique destination ID."
      name:
        type: "string"
        example: "Example Google Pub/Sub Destination"
        description: "The destination name"
      kind:
        type: "string"
        example: "google-pubsub"
        description: "Destination type (\"google-pubsub\", \"kinesis\", \"mparticle\"\
          , or \"segment\")"
        enum:
        - "google-pubsub"
        - "kinesis"
        - "mparticle"
        - "segment"
      config:
        type: "object"
        example:
          project: "cool-project"
          topic: "test"
        description: "destination-specific configuration."
        properties: {}
      "on":
        type: "boolean"
        example: true
        description: "Whether the data export destination is on or not."
      version:
        type: "integer"
        example: 2
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      kind: "google-pubsub"
      name: "Example Google Pub/Sub Destination"
      _id: "37ed9aad-de0a-4665-932e-41c35587aeea"
      config:
        project: "cool-project"
        topic: "test"
      version: 2
      "on": true
  Destinations:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Destination"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "google-pubsub"
        name: "Example Google Pub/Sub Destination"
        _id: "37ed9aad-de0a-4665-932e-41c35587aeea"
        config:
          project: "cool-project"
          topic: "test"
        version: 2
        "on": true
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "google-pubsub"
        name: "Example Google Pub/Sub Destination"
        _id: "37ed9aad-de0a-4665-932e-41c35587aeea"
        config:
          project: "cool-project"
          topic: "test"
        version: 2
        "on": true
  DestinationGooglePubSub:
    type: "object"
    properties:
      project:
        type: "string"
        example: "cool-project"
      topic:
        type: "string"
        example: "test"
  DestinationAmazonKinesis:
    type: "object"
    properties:
      region:
        type: "string"
        example: "us-east-1"
      roleArn:
        type: "string"
        example: "arn:aws:iam::123456789012:role/marketingadmin"
      streamName:
        type: "string"
        example: "cat-stream"
  DestinationMParticle:
    type: "object"
    properties:
      apiKey:
        type: "string"
        example: "apiKeyfromMParticle"
      secret:
        type: "string"
        example: "mParticleSecret"
      userIdentity:
        type: "string"
        example: "customer_id"
      environment:
        type: "string"
        example: "production"
  DestinationSegment:
    type: "object"
    properties:
      writeKey:
        type: "string"
        example: "segmentWriteKey"
  Environment:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      key:
        type: "string"
        example: "production"
        description: "The key for the environment."
      name:
        type: "string"
        example: "Production"
        description: "The name of the environment."
      apiKey:
        type: "string"
        example: "XXX"
        description: "The SDK key for backend LaunchDarkly SDKs."
      mobileKey:
        type: "string"
        example: "XXX"
        description: "The SDK key for mobile LaunchDarkly SDKs."
      color:
        type: "string"
        example: "417505"
        description: "The swatch color for the environment."
      defaultTtl:
        type: "number"
        example: 0.0
        description: "The default TTL."
      secureMode:
        type: "boolean"
        example: false
        description: "Determines if this environment is in safe mode."
      defaultTrackEvents:
        type: "boolean"
        example: false
        description: "Set to true to send detailed event information for new flags."
      tags:
        type: "array"
        description: "An array of tags for this environment."
        items:
          type: "string"
      requireComments:
        type: "boolean"
        example: false
        description: "Determines if this environment requires comments for flag and\
          \ segment changes."
      confirmChanges:
        type: "boolean"
        example: false
        description: "Determines if this environment requires confirmation for flag\
          \ and segment changes."
      approvalSettings:
        $ref: "#/definitions/Environment_approvalSettings"
    example:
      approvalSettings:
        serviceKind: "launchdarkly"
        canReviewOwnRequest: true
        requiredApprovalTags:
        - "requiredApprovalTags"
        - "requiredApprovalTags"
        canApplyDeclinedChanges: true
        minNumApprovals: 2
        required: true
      apiKey: "XXX"
      color: "417505"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      confirmChanges: false
      requireComments: false
      mobileKey: "XXX"
      defaultTrackEvents: false
      tags:
      - "tags"
      - "tags"
      name: "Production"
      defaultTtl: 0.0
      _id: "5a580a01b4ff89217bdf9dc1"
      secureMode: false
      key: "production"
  EnvironmentPost:
    type: "object"
    required:
    - "color"
    - "key"
    - "name"
    properties:
      name:
        type: "string"
        example: "Development"
        description: "The name of the new environment."
      key:
        type: "string"
        example: "dev"
        description: "A project-unique key for the new environment."
      color:
        type: "string"
        example: "417505"
        description: "A color swatch (as an RGB hex value with no leading '#', e.g.\
          \ C8C8C8)."
      defaultTtl:
        type: "number"
        example: 0.0
        description: "The default TTL for the new environment."
      secureMode:
        type: "boolean"
        example: false
        description: "Determines whether the environment is in secure mode."
      defaultTrackEvents:
        type: "boolean"
        example: false
        description: "Set to true to send detailed event information for newly created\
          \ flags."
      tags:
        type: "array"
        example:
        - "tag1"
        - "tag2"
        description: "An array of tags for this environment."
        items:
          type: "string"
      requireComments:
        type: "boolean"
        example: false
        description: "Determines if this environment requires comments for flag and\
          \ segment changes."
      confirmChanges:
        type: "boolean"
        example: false
        description: "Determines if this environment requires confirmation for flag\
          \ and segment changes."
    example:
      color: "417505"
      confirmChanges: false
      name: "Development"
      defaultTtl: 0.0
      requireComments: false
      secureMode: false
      defaultTrackEvents: false
      key: "dev"
      tags:
      - "tag1"
      - "tag2"
  User:
    type: "object"
    properties:
      key:
        type: "string"
        example: "a00bea"
      secondary:
        type: "string"
      ip:
        type: "string"
      country:
        type: "string"
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      avatar:
        type: "string"
      name:
        type: "string"
        example: "Bob Loblaw"
      anonymous:
        type: "boolean"
      custom:
        type: "object"
        example:
          company: "example.com"
        properties: {}
    example:
      secondary: "secondary"
      country: "country"
      firstName: "firstName"
      lastName: "lastName"
      ip: "ip"
      custom:
        company: "example.com"
      name: "Bob Loblaw"
      anonymous: true
      avatar: "avatar"
      key: "a00bea"
      email: "email"
  UserRecord:
    type: "object"
    properties:
      lastPing:
        type: "string"
        example: "2015-03-03T02:37:22.492Z"
      environmentId:
        type: "string"
        example: "54ac2d97de674204ddd61096"
      ownerId:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      user:
        $ref: "#/definitions/User"
      avatar:
        type: "string"
        example: "https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg"
    example:
      environmentId: "54ac2d97de674204ddd61096"
      lastPing: "2015-03-03T02:37:22.492Z"
      avatar: "https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg"
      ownerId: "5a580a01b4ff89217bdf9dc1"
      user:
        secondary: "secondary"
        country: "country"
        firstName: "firstName"
        lastName: "lastName"
        ip: "ip"
        custom:
          company: "example.com"
        name: "Bob Loblaw"
        anonymous: true
        avatar: "avatar"
        key: "a00bea"
        email: "email"
  Users:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      totalCount:
        type: "number"
        example: 3.0
      items:
        type: "array"
        items:
          $ref: "#/definitions/UserRecord"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      totalCount: 3.0
      items:
      - environmentId: "54ac2d97de674204ddd61096"
        lastPing: "2015-03-03T02:37:22.492Z"
        avatar: "https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg"
        ownerId: "5a580a01b4ff89217bdf9dc1"
        user:
          secondary: "secondary"
          country: "country"
          firstName: "firstName"
          lastName: "lastName"
          ip: "ip"
          custom:
            company: "example.com"
          name: "Bob Loblaw"
          anonymous: true
          avatar: "avatar"
          key: "a00bea"
          email: "email"
      - environmentId: "54ac2d97de674204ddd61096"
        lastPing: "2015-03-03T02:37:22.492Z"
        avatar: "https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg"
        ownerId: "5a580a01b4ff89217bdf9dc1"
        user:
          secondary: "secondary"
          country: "country"
          firstName: "firstName"
          lastName: "lastName"
          ip: "ip"
          custom:
            company: "example.com"
          name: "Bob Loblaw"
          anonymous: true
          avatar: "avatar"
          key: "a00bea"
          email: "email"
  AuditLogEntry:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      date:
        type: "integer"
        format: "int64"
        example: 1472243938774
      kind:
        type: "string"
        example: "environment"
      name:
        type: "string"
        example: "Testing"
      description:
        type: "string"
        example: "Changed the name from Test to Testing"
      shortDescription:
        type: "string"
        example: "\"\""
      comment:
        type: "string"
        example: "This is a comment string"
      member:
        $ref: "#/definitions/Member"
      titleVerb:
        type: "string"
        example: "changed the name of"
      title:
        type: "string"
        example: "[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name\
          \ of [Testing](https://app.launchdarkly.com/settings#/projects)"
      target:
        $ref: "#/definitions/AuditLogEntry_target"
    example:
      date: 1472243938774
      titleVerb: "changed the name of"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      kind: "environment"
      name: "Testing"
      member:
        firstName: "Alan"
        lastName: "Turing"
        _verified: true
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        _lastSeen: 1469326565348
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        _lastSeenMetadata:
          tokenId: "5fd2a1ee05600316d5cb3e96"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
      description: "Changed the name from Test to Testing"
      comment: "This is a comment string"
      _id: "5a580a01b4ff89217bdf9dc1"
      shortDescription: "\"\""
      title: "[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name of\
        \ [Testing](https://app.launchdarkly.com/settings#/projects)"
      target:
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Testing"
        resources:
        - "proj/alexis:env/test"
        - "proj/alexis:env/test"
  AuditLogEntries:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/AuditLogEntry"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - date: 1472243938774
        titleVerb: "changed the name of"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "environment"
        name: "Testing"
        member:
          firstName: "Alan"
          lastName: "Turing"
          _verified: true
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          _lastSeen: 1469326565348
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          _lastSeenMetadata:
            tokenId: "5fd2a1ee05600316d5cb3e96"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        description: "Changed the name from Test to Testing"
        comment: "This is a comment string"
        _id: "5a580a01b4ff89217bdf9dc1"
        shortDescription: "\"\""
        title: "[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name\
          \ of [Testing](https://app.launchdarkly.com/settings#/projects)"
        target:
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          name: "Testing"
          resources:
          - "proj/alexis:env/test"
          - "proj/alexis:env/test"
      - date: 1472243938774
        titleVerb: "changed the name of"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "environment"
        name: "Testing"
        member:
          firstName: "Alan"
          lastName: "Turing"
          _verified: true
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          _lastSeen: 1469326565348
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          _lastSeenMetadata:
            tokenId: "5fd2a1ee05600316d5cb3e96"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        description: "Changed the name from Test to Testing"
        comment: "This is a comment string"
        _id: "5a580a01b4ff89217bdf9dc1"
        shortDescription: "\"\""
        title: "[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name\
          \ of [Testing](https://app.launchdarkly.com/settings#/projects)"
        target:
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          name: "Testing"
          resources:
          - "proj/alexis:env/test"
          - "proj/alexis:env/test"
  UserFlagSetting:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _value:
        type: "boolean"
        example: true
        description: "The most important attribute in the response. The _value is\
          \ the current setting for the user. For a boolean feature toggle, this will\
          \ be true, false, or null if there is no defined fallthrough value."
      setting:
        type: "boolean"
        description: "The setting attribute indicates whether you've explicitly targeted\
          \ this user to receive a particular variation. For example, if you have\
          \ explicitly turned off a feature toggle for a user, setting will be false.\
          \ A setting of null means that you haven't assigned that user to a specific\
          \ variation."
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _value: true
      setting: true
  UserFlagSettings:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "object"
        example:
          sort.order:
            _links:
              self:
                href: "/api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order"
                type: "application/json"
              _value: true
          alternate.page:
            _links:
              self:
                href: "/api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page"
                type: "application/json"
            _value: "false,"
        additionalProperties:
          $ref: "#/definitions/UserFlagSetting"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
        sort.order:
          _links:
            self:
              href: "/api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order"
              type: "application/json"
            _value: true
        alternate.page:
          _links:
            self:
              href: "/api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page"
              type: "application/json"
          _value: "false,"
  Statement:
    type: "object"
    properties:
      resources:
        type: "array"
        items:
          type: "string"
          example: "proj/*:env/*:flag/my-flag"
          description: "A resource specifier string"
      notResources:
        type: "array"
        description: "Targeted resource will be those resources NOT in this list.\
          \ The \"resources`\" field must be empty to use this field."
        items:
          type: "string"
          example: "proj/*:env/*:flag/my-flag"
          description: "A resource specifier string"
      actions:
        type: "array"
        items:
          type: "string"
          example: "updateOn"
          description: "An action to perform on a resource."
      notActions:
        type: "array"
        description: "Targeted actions will be those actions NOT in this list. The\
          \ \"actions\" field must be empty to use this field."
        items:
          type: "string"
          example: "updateOn"
          description: "An action to perform on a resource."
      effect:
        type: "string"
        enum:
        - "allow"
        - "deny"
    example:
      notActions:
      - "updateOn"
      - "updateOn"
      notResources:
      - "proj/*:env/*:flag/my-flag"
      - "proj/*:env/*:flag/my-flag"
      effect: "allow"
      resources:
      - "proj/*:env/*:flag/my-flag"
      - "proj/*:env/*:flag/my-flag"
      actions:
      - "updateOn"
      - "updateOn"
  Role:
    type: "string"
    enum:
    - "writer"
    - "reader"
    - "admin"
    - "owner"
  CustomRole:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      name:
        type: "string"
        example: "revenue team"
        description: "Name of the custom role."
      key:
        type: "string"
        example: "revenue-team"
        description: "The 20-hexdigit id or the key for a custom role."
      description:
        type: "string"
        example: "Description of revenue team role here"
        description: "Description of the custom role."
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      policy:
        type: "array"
        items:
          $ref: "#/definitions/Policy"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "revenue team"
      description: "Description of revenue team role here"
      _id: "5a580a01b4ff89217bdf9dc1"
      key: "revenue-team"
      policy:
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "deny"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "deny"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
  CustomRoles:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/CustomRole"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "revenue team"
        description: "Description of revenue team role here"
        _id: "5a580a01b4ff89217bdf9dc1"
        key: "revenue-team"
        policy:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "revenue team"
        description: "Description of revenue team role here"
        _id: "5a580a01b4ff89217bdf9dc1"
        key: "revenue-team"
        policy:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
  Policy:
    type: "object"
    properties:
      resources:
        type: "array"
        items:
          type: "string"
          example: "proj/*:env/*:flag/my-flag"
          description: "A resource specifier string"
      notResources:
        type: "array"
        description: "Targeted resource will be those resources NOT in this list.\
          \ The \"resources`\" field must be empty to use this field."
        items:
          type: "string"
          example: "proj/*:env/*:flag/my-flag"
          description: "A resource specifier string"
      actions:
        type: "array"
        items:
          type: "string"
          example: "updateOn"
          description: "An action to perform on a resource."
      notActions:
        type: "array"
        description: "Targeted actions will be those actions NOT in this list. The\
          \ \"actions\" field must be empty to use this field."
        items:
          type: "string"
          example: "updateOn"
          description: "An action to perform on a resource."
      effect:
        type: "string"
        example: "deny"
        description: "Effect of the policy - allow or deny."
    example:
      notActions:
      - "updateOn"
      - "updateOn"
      notResources:
      - "proj/*:env/*:flag/my-flag"
      - "proj/*:env/*:flag/my-flag"
      effect: "deny"
      resources:
      - "proj/*:env/*:flag/my-flag"
      - "proj/*:env/*:flag/my-flag"
      actions:
      - "updateOn"
      - "updateOn"
  Id:
    type: "string"
    description: "The unique resource id."
    example: "5a580a01b4ff89217bdf9dc1"
  PatchOperation:
    type: "object"
    required:
    - "op"
    - "path"
    - "value"
    properties:
      op:
        type: "string"
        example: "replace"
      path:
        type: "string"
        example: "/name"
      value:
        type: "object"
        example: "My resource name"
        properties: {}
  SemanticPatchOperation:
    type: "object"
    required:
    - "instructions"
    properties:
      comment:
        type: "string"
        example: "This is a comment string"
      instructions:
        $ref: "#/definitions/SemanticPatchInstruction"
  SemanticPatchInstruction:
    type: "array"
    items:
      $ref: "#/definitions/SemanticPatchInstruction_inner"
  CustomProperty:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "My property"
        description: "The name of the property."
      value:
        type: "array"
        description: "Values for this property."
        items:
          type: "string"
          example: ""
    description: "A name and value describing a custom property."
  CustomPropertyValues:
    type: "array"
    description: "Values for this property."
    items:
      type: "string"
    example:
    - "Value 1"
    - "Value 2"
  UsageLinks:
    type: "object"
    properties:
      parent:
        $ref: "#/definitions/Link"
      self:
        $ref: "#/definitions/Link"
      subseries:
        type: "array"
        description: "The following links that are in the response."
        items:
          $ref: "#/definitions/Link"
    example:
      parent:
        href: "/api/v2/endpoint"
        type: "application/json"
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
      subseries:
      - href: "/api/v2/endpoint"
        type: "application/json"
      - href: "/api/v2/endpoint"
        type: "application/json"
  StreamLinks:
    type: "object"
    properties:
      parent:
        $ref: "#/definitions/Link"
      self:
        $ref: "#/definitions/Link"
      subseries:
        type: "array"
        description: "Links to endpoints that are in the request path."
        items:
          $ref: "#/definitions/Link"
  Usage:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/UsageLinks"
      series:
        type: "array"
        items:
          $ref: "#/definitions/StreamUsageSeries"
    example:
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
        subseries:
        - href: "/api/v2/endpoint"
          type: "application/json"
        - href: "/api/v2/endpoint"
          type: "application/json"
      series:
      - "0": 0
        time: 1551740400000
      - "0": 0
        time: 1551740400000
  UsageError:
    type: "object"
    properties:
      message:
        type: "string"
        example: "This is a beta API, you must pass beta in the LD-API-Version header\
          \ to use it."
  Streams:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/StreamUsageLinks"
    example:
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
        subseries:
        - href: "/api/v2/endpoint"
          type: "application/json"
        - href: "/api/v2/endpoint"
          type: "application/json"
  Stream:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/StreamUsageLinks"
      metadata:
        type: "array"
        items:
          $ref: "#/definitions/StreamUsageMetadata"
      series:
        type: "array"
        items:
          $ref: "#/definitions/StreamUsageSeries"
    example:
      metadata:
      - sdk: "ruby"
        source: "server"
        version: "5.4.3"
      - sdk: "ruby"
        source: "server"
        version: "5.4.3"
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
        subseries:
        - href: "/api/v2/endpoint"
          type: "application/json"
        - href: "/api/v2/endpoint"
          type: "application/json"
      series:
      - "0": 0
        time: 1551740400000
      - "0": 0
        time: 1551740400000
  StreamUsageLinks:
    type: "object"
    properties:
      parent:
        $ref: "#/definitions/Link"
      self:
        $ref: "#/definitions/Link"
      subseries:
        type: "array"
        description: "The following links that are in the response."
        items:
          $ref: "#/definitions/Link"
    example:
      parent:
        href: "/api/v2/endpoint"
        type: "application/json"
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
      subseries:
      - href: "/api/v2/endpoint"
        type: "application/json"
      - href: "/api/v2/endpoint"
        type: "application/json"
  StreamUsageSeries:
    type: "object"
    properties:
      "0":
        type: "integer"
        format: "int64"
        example: 0
        description: "A key corresponding to a time series data point."
      time:
        type: "integer"
        format: "int64"
        example: 1551740400000
        description: "A unix epoch time in milliseconds specifying the creation time\
          \ of this flag."
    example:
      "0": 0
      time: 1551740400000
  StreamUsageMetadata:
    type: "object"
    properties:
      sdk:
        type: "string"
        example: "ruby"
        description: "The language of the sdk"
      version:
        type: "string"
        example: "5.4.3"
        description: "The version of the SDK"
      source:
        type: "string"
        example: "server"
    example:
      sdk: "ruby"
      source: "server"
      version: "5.4.3"
  StreamUsageError:
    type: "object"
    properties:
      code:
        type: "string"
        example: "not_found"
      message:
        type: "string"
        example: "Stream source not found"
  StreamBySDK:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/StreamBySDKLinks"
      metadata:
        type: "array"
        items:
          $ref: "#/definitions/StreamBySDKLinksMetadata"
      series:
        type: "array"
        items:
          $ref: "#/definitions/StreamUsageSeries"
    example:
      metadata:
      - sdk: "ruby"
        source: "server"
        version: "5.4.3"
      - sdk: "ruby"
        source: "server"
        version: "5.4.3"
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      series:
      - "0": 0
        time: 1551740400000
      - "0": 0
        time: 1551740400000
  StreamBySDKLinks:
    type: "object"
    properties:
      parent:
        $ref: "#/definitions/Link"
      self:
        $ref: "#/definitions/Link"
    example:
      parent:
        href: "/api/v2/endpoint"
        type: "application/json"
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
  StreamBySDKLinksMetadata:
    type: "object"
    properties:
      sdk:
        type: "string"
        example: "ruby"
      version:
        type: "string"
        example: "5.4.3"
      source:
        type: "string"
        example: "server"
    example:
      sdk: "ruby"
      source: "server"
      version: "5.4.3"
  StreamSDKVersion:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/StreamBySDKLinks"
      sdkVersions:
        type: "array"
        items:
          $ref: "#/definitions/StreamSDKVersionData"
    example:
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      sdkVersions:
      - sdk: "ruby"
        version: "5.4.3"
      - sdk: "ruby"
        version: "5.4.3"
  StreamSDKVersionData:
    type: "object"
    properties:
      sdk:
        type: "string"
        example: "ruby"
        description: "The language of the sdk"
      version:
        type: "string"
        example: "5.4.3"
        description: "The version of the sdk"
    example:
      sdk: "ruby"
      version: "5.4.3"
  MAU:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/UsageLinks"
      metadata:
        type: "array"
        items:
          $ref: "#/definitions/StreamBySDKLinksMetadata"
      series:
        type: "array"
        items:
          $ref: "#/definitions/StreamUsageSeries"
    example:
      metadata:
      - sdk: "ruby"
        source: "server"
        version: "5.4.3"
      - sdk: "ruby"
        source: "server"
        version: "5.4.3"
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
        subseries:
        - href: "/api/v2/endpoint"
          type: "application/json"
        - href: "/api/v2/endpoint"
          type: "application/json"
      series:
      - "0": 0
        time: 1551740400000
      - "0": 0
        time: 1551740400000
  MAUbyCategory:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/StreamBySDKLinks"
      metadata:
        type: "array"
        items:
          $ref: "#/definitions/MAUMetadata"
      series:
        type: "array"
        items:
          $ref: "#/definitions/StreamUsageSeries"
    example:
      metadata:
      - {}
      - {}
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      series:
      - "0": 0
        time: 1551740400000
      - "0": 0
        time: 1551740400000
  MAUMetadata:
    type: "object"
  Events:
    type: "object"
    properties:
      links:
        $ref: "#/definitions/UsageLinks"
    example:
      links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
        subseries:
        - href: "/api/v2/endpoint"
          type: "application/json"
        - href: "/api/v2/endpoint"
          type: "application/json"
  EvaluationUsageError:
    type: "object"
    properties:
      code:
        type: "string"
        example: "not_found"
      message:
        type: "string"
        example: "unknown environment"
  FeatureFlagCopyObject:
    type: "object"
    required:
    - "key"
    properties:
      key:
        type: "string"
        example: "staging"
        description: "The environment key to be used."
      currentVersion:
        type: "integer"
        example: 65
        description: "If the latest version of the flag matches provided version it\
          \ will copy, otherwise it will return a conflict."
  CopyActions:
    type: "string"
    example: []
    enum:
    - "updateOn"
    - "updatePrerequisites"
    - "updateTargets"
    - "updateRules"
    - "updateFallthrough"
    - "updateOffVariation"
  FlagListItem:
    type: "object"
    properties:
      name:
        type: "string"
      key:
        type: "string"
      _links:
        $ref: "#/definitions/Links"
      _site:
        $ref: "#/definitions/Site"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _site:
        href: "/features/sort.order"
        type: "text/html"
      name: "name"
      key: "key"
  Tokens:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Token"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - role: "writer"
        customRoleIds:
        - "customRoleIds"
        - "customRoleIds"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _member:
          firstName: "Alan"
          lastName: "Turing"
          _verified: true
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          _lastSeen: 1469326565348
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          _lastSeenMetadata:
            tokenId: "5fd2a1ee05600316d5cb3e96"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        ownerId: "5a580a01b4ff89217bdf9dc1"
        creationDate: 1443652232590
        defaultApiVersion: 0
        token: "3243"
        lastUsed: 1469326565348
        inlineRole:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        name: "My access token"
        _id: "5a580a01b4ff89217bdf9dc1"
        lastModified: 1469326565348
        serviceToken: true
        memberId: "5a580a01b4ff89217bdf9dc1"
      - role: "writer"
        customRoleIds:
        - "customRoleIds"
        - "customRoleIds"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _member:
          firstName: "Alan"
          lastName: "Turing"
          _verified: true
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          _lastSeen: 1469326565348
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          _lastSeenMetadata:
            tokenId: "5fd2a1ee05600316d5cb3e96"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        ownerId: "5a580a01b4ff89217bdf9dc1"
        creationDate: 1443652232590
        defaultApiVersion: 0
        token: "3243"
        lastUsed: 1469326565348
        inlineRole:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        name: "My access token"
        _id: "5a580a01b4ff89217bdf9dc1"
        lastModified: 1469326565348
        serviceToken: true
        memberId: "5a580a01b4ff89217bdf9dc1"
  Token:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      ownerId:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      memberId:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      _member:
        $ref: "#/definitions/Member"
      creationDate:
        type: "integer"
        format: "int64"
        example: 1443652232590
        description: "A unix epoch time in milliseconds specifying the creation time\
          \ of this access token."
      lastModified:
        type: "integer"
        format: "int64"
        example: 1469326565348
        description: "A unix epoch time in milliseconds specifying the last time this\
          \ access token was modified."
      lastUsed:
        type: "integer"
        format: "int64"
        example: 1469326565348
        description: "A unix epoch time in milliseconds specifying the last time this\
          \ access token was used to authorize access to the LaunchDarkly REST API."
      token:
        type: "string"
        example: "3243"
        description: "The last 4 digits of the unique secret key for this access token.\
          \ If creating or resetting the token, this will be the full token secret."
      name:
        type: "string"
        example: "My access token"
        description: "A human-friendly name for the access token"
      role:
        type: "string"
        example: "writer"
        description: "The name of a built-in role for the token"
      customRoleIds:
        type: "array"
        description: "A list of custom role IDs to use as access limits for the access\
          \ token"
        items:
          type: "string"
      inlineRole:
        type: "array"
        items:
          $ref: "#/definitions/Statement"
      serviceToken:
        type: "boolean"
        description: "Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens"
      defaultApiVersion:
        type: "integer"
        description: "The default API version for this token"
    example:
      role: "writer"
      customRoleIds:
      - "customRoleIds"
      - "customRoleIds"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _member:
        firstName: "Alan"
        lastName: "Turing"
        _verified: true
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        _lastSeen: 1469326565348
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        _lastSeenMetadata:
          tokenId: "5fd2a1ee05600316d5cb3e96"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
      ownerId: "5a580a01b4ff89217bdf9dc1"
      creationDate: 1443652232590
      defaultApiVersion: 0
      token: "3243"
      lastUsed: 1469326565348
      inlineRole:
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "allow"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "allow"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
      name: "My access token"
      _id: "5a580a01b4ff89217bdf9dc1"
      lastModified: 1469326565348
      serviceToken: true
      memberId: "5a580a01b4ff89217bdf9dc1"
  RelayProxyConfigs:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/RelayProxyConfig"
    example:
      items:
      - displayKey: "66eo"
        _creator:
          firstName: "Alan"
          lastName: "Turing"
          _verified: true
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          _lastSeen: 1469326565348
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          _lastSeenMetadata:
            tokenId: "5fd2a1ee05600316d5cb3e96"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        fullKey: "rel-8a3a773d-b75e-48eb-a850-492cda9266eo"
        name: "My relay proxy config"
        _id: "5a580a01b4ff89217bdf9dc1"
        lastModified: 1469326565348
        creationDate: 1443652232590
        policy:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
      - displayKey: "66eo"
        _creator:
          firstName: "Alan"
          lastName: "Turing"
          _verified: true
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          _lastSeen: 1469326565348
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          _lastSeenMetadata:
            tokenId: "5fd2a1ee05600316d5cb3e96"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        fullKey: "rel-8a3a773d-b75e-48eb-a850-492cda9266eo"
        name: "My relay proxy config"
        _id: "5a580a01b4ff89217bdf9dc1"
        lastModified: 1469326565348
        creationDate: 1443652232590
        policy:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
  RelayProxyConfig:
    type: "object"
    required:
    - "_creator"
    - "_id"
    - "creationDate"
    - "displayKey"
    - "lastModified"
    - "name"
    - "policy"
    properties:
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      _creator:
        $ref: "#/definitions/Member"
      name:
        type: "string"
        example: "My relay proxy config"
        description: "A human-friendly name for the relay proxy configuration"
      policy:
        type: "array"
        items:
          $ref: "#/definitions/Policy"
      fullKey:
        type: "string"
        example: "rel-8a3a773d-b75e-48eb-a850-492cda9266eo"
        description: "Full secret key. Only included if creating or resetting the\
          \ relay proxy configuration"
      displayKey:
        type: "string"
        example: "66eo"
        description: "The last 4 digits of the unique secret key for this relay proxy\
          \ configuration"
      creationDate:
        type: "integer"
        format: "int64"
        example: 1443652232590
        description: "A unix epoch time in milliseconds specifying the creation time\
          \ of this relay proxy configuration"
      lastModified:
        type: "integer"
        format: "int64"
        example: 1469326565348
        description: "A unix epoch time in milliseconds specifying the last time this\
          \ relay proxy configuration was modified"
    example:
      displayKey: "66eo"
      _creator:
        firstName: "Alan"
        lastName: "Turing"
        _verified: true
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        _lastSeen: 1469326565348
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        _lastSeenMetadata:
          tokenId: "5fd2a1ee05600316d5cb3e96"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
      fullKey: "rel-8a3a773d-b75e-48eb-a850-492cda9266eo"
      name: "My relay proxy config"
      _id: "5a580a01b4ff89217bdf9dc1"
      lastModified: 1469326565348
      creationDate: 1443652232590
      policy:
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "deny"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "deny"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
  HierarchicalLinks:
    type: "object"
    properties:
      parent:
        $ref: "#/definitions/Link"
      self:
        $ref: "#/definitions/Link"
    example:
      parent:
        href: "/api/v2/endpoint"
        type: "application/json"
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
  IntegrationSubscription:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/HierarchicalLinks"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      kind:
        type: "string"
        example: "datadog"
        description: "The type of integration associated with this configuration."
      name:
        type: "string"
        example: "V2"
        description: "The user-defined name associated with this configuration."
      config:
        type: "object"
        example:
          apiKey: "582**************************116"
          hostURL: "https://api.datadoghq.com"
        description: "A key-value mapping of configuration fields."
        properties: {}
      statements:
        type: "array"
        items:
          $ref: "#/definitions/Statement"
      "on":
        type: "boolean"
        example: true
        description: "Whether or not the integration is currently active."
      tags:
        type: "array"
        description: "An array of tags for this integration configuration."
        items:
          type: "string"
      _status:
        $ref: "#/definitions/IntegrationSubscription__status"
    example:
      _links:
        parent:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      kind: "datadog"
      name: "V2"
      statements:
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "allow"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
      - notActions:
        - "updateOn"
        - "updateOn"
        notResources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        effect: "allow"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
      _id: "5a580a01b4ff89217bdf9dc1"
      _status:
        successCount: 6
        lastSuccess: 1443652232590
        errorCount: 2
      config:
        apiKey: "582**************************116"
        hostURL: "https://api.datadoghq.com"
      "on": true
      tags:
      - "tags"
      - "tags"
  Integration:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/DependentFlag__links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/IntegrationSubscription"
    example:
      _links:
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - _links:
          parent:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "datadog"
        name: "V2"
        statements:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        _id: "5a580a01b4ff89217bdf9dc1"
        _status:
          successCount: 6
          lastSuccess: 1443652232590
          errorCount: 2
        config:
          apiKey: "582**************************116"
          hostURL: "https://api.datadoghq.com"
        "on": true
        tags:
        - "tags"
        - "tags"
      - _links:
          parent:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "datadog"
        name: "V2"
        statements:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        _id: "5a580a01b4ff89217bdf9dc1"
        _status:
          successCount: 6
          lastSuccess: 1443652232590
          errorCount: 2
        config:
          apiKey: "582**************************116"
          hostURL: "https://api.datadoghq.com"
        "on": true
        tags:
        - "tags"
        - "tags"
  Integrations:
    type: "object"
    properties:
      _links:
        type: "object"
        example:
          appdynamics:
            href: "/api/v2/integrations/appdynamics"
            type: "application/json"
          splunk:
            href: "/api/v2/integrations/splunk"
            type: "application/json"
        description: "A mapping of integration types to their respective API endpoints."
        properties: {}
      items:
        type: "array"
        items:
          $ref: "#/definitions/IntegrationSubscription"
    example:
      _links:
        appdynamics:
          href: "/api/v2/integrations/appdynamics"
          type: "application/json"
        splunk:
          href: "/api/v2/integrations/splunk"
          type: "application/json"
      items:
      - _links:
          parent:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "datadog"
        name: "V2"
        statements:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        _id: "5a580a01b4ff89217bdf9dc1"
        _status:
          successCount: 6
          lastSuccess: 1443652232590
          errorCount: 2
        config:
          apiKey: "582**************************116"
          hostURL: "https://api.datadoghq.com"
        "on": true
        tags:
        - "tags"
        - "tags"
      - _links:
          parent:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "datadog"
        name: "V2"
        statements:
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - notActions:
          - "updateOn"
          - "updateOn"
          notResources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          effect: "allow"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        _id: "5a580a01b4ff89217bdf9dc1"
        _status:
          successCount: 6
          lastSuccess: 1443652232590
          errorCount: 2
        config:
          apiKey: "582**************************116"
          hostURL: "https://api.datadoghq.com"
        "on": true
        tags:
        - "tags"
        - "tags"
  projectBody:
    type: "object"
    required:
    - "key"
    - "name"
    properties:
      name:
        type: "string"
        example: "New Project"
      key:
        type: "string"
        example: "new-project"
      includeInSnippetByDefault:
        type: "boolean"
        example: false
      tags:
        type: "array"
        example:
        - "ops"
        - "dev"
        items:
          type: "string"
      environments:
        type: "array"
        items:
          $ref: "#/definitions/EnvironmentPost"
      defaultClientSideAvailability:
        $ref: "#/definitions/ClientSideAvailability"
  featureFlagBody:
    type: "object"
    required:
    - "key"
    - "name"
    - "variations"
    properties:
      name:
        type: "string"
        example: "new test flag"
        description: "A human-friendly name for the feature flag. Remember to note\
          \ if this flag is intended to be temporary or permanent."
      key:
        type: "string"
        example: "new-test-flag"
        description: "A unique key that will be used to reference the flag in your\
          \ code."
      description:
        type: "string"
        example: "This flag controls whether test feature is turned on or not."
        description: "A description of the feature flag."
      variations:
        type: "array"
        description: "An array of possible variations for the flag."
        items:
          $ref: "#/definitions/Variation"
      temporary:
        type: "boolean"
        description: "Whether or not the flag is a temporary flag."
      tags:
        type: "array"
        description: "Tags for the feature flag."
        items:
          type: "string"
          example: ""
      includeInSnippet:
        type: "boolean"
        description: "Whether or not this flag should be made available to the client-side\
          \ JavaScript SDK."
      clientSideAvailability:
        $ref: "#/definitions/ClientSideAvailability"
      defaults:
        $ref: "#/definitions/Defaults"
  patchComment:
    type: "object"
    properties:
      comment:
        type: "string"
        example: "This is a comment string"
      patch:
        type: "array"
        items:
          $ref: "#/definitions/PatchOperation"
  featureFlagCopyBody:
    type: "object"
    properties:
      source:
        $ref: "#/definitions/FeatureFlagCopyObject"
      target:
        $ref: "#/definitions/FeatureFlagCopyObject"
      comment:
        type: "string"
        example: "This is a comment string"
        description: "comment will be included in audit log item for change."
      includedActions:
        type: "array"
        description: "Define the parts of the flag configuration that will be copied."
        items:
          $ref: "#/definitions/CopyActions"
      excludedActions:
        type: "array"
        description: "Define the parts of the flag configuration that will not be\
          \ copied."
        items:
          $ref: "#/definitions/CopyActions"
  flagConfigScheduledChangesPostBody:
    type: "object"
    properties:
      comment:
        type: "string"
        description: "Used to describe the scheduled changes."
      executionDate:
        type: "integer"
        description: "A unix epoch time in milliseconds specifying the date the scheduled\
          \ changes will be applied"
      instructions:
        $ref: "#/definitions/SemanticPatchInstruction"
  flagConfigScheduledChangesConflictsBody:
    type: "object"
    properties:
      executionDate:
        type: "integer"
        description: "A unix epoch time in milliseconds specifying the date the scheduled\
          \ changes will be applied"
      instructions:
        $ref: "#/definitions/SemanticPatchInstruction"
  flagConfigScheduledChangesPatchBody:
    type: "object"
    properties:
      comment:
        type: "string"
        description: "Used to describe the scheduled changes."
      instructions:
        $ref: "#/definitions/SemanticPatchInstruction"
  approvalRequestConfigBody:
    type: "object"
    required:
    - "description"
    - "instructions"
    - "notifyMemberIds"
    properties:
      description:
        type: "string"
        description: "A name that describes the changes you would like to apply to\
          \ a feature flag configuration"
      instructions:
        $ref: "#/definitions/SemanticPatchInstruction"
      notifyMemberIds:
        type: "array"
        example:
        - "memberId"
        - "memberId2"
        items:
          type: "string"
      comment:
        type: "string"
        description: "comment will be included in audit log item for change."
      executionDate:
        type: "integer"
        format: "int64"
        description: "Timestamp for when instructions will be executed"
      operatingOnId:
        type: "string"
        description: "ID of scheduled change to edit or delete"
  approvalRequestApplyConfigBody:
    type: "object"
    properties:
      comment:
        type: "string"
        example: "Applying approved changes"
        description: "comment will be included in audit log item for change."
  approvalRequestReviewConfigBody:
    type: "object"
    required:
    - "kind"
    properties:
      kind:
        type: "string"
        example: "approve"
        description: "One of approve, decline, or comment."
        enum:
        - "approve"
        - "decline"
        - "comment"
      comment:
        type: "string"
        example: "This is a comment string"
        description: "comment will be included in audit log item for change."
  userSegmentBody:
    type: "object"
    required:
    - "key"
    - "name"
    properties:
      name:
        type: "string"
        example: "new segment"
        description: "A human-friendly name for the user segment."
      key:
        type: "string"
        example: "new-segment"
        description: "A unique key that will be used to reference the user segment\
          \ in feature flags."
      description:
        type: "string"
        example: "Users in this segment will have access to beta features."
        description: "A description for the user segment."
      unbounded:
        type: "boolean"
        example: false
        description: "Controls whether this is considered a \"big segment\" which\
          \ can support an unlimited numbers of users. Include/exclude lists sent\
          \ with this payload are not used in big segments. Contact your account manager\
          \ for early access to this feature."
      tags:
        type: "array"
        description: "Tags for the user segment."
        items:
          type: "string"
          example: ""
  bigSegmentTargetsBody:
    type: "object"
    properties:
      included:
        $ref: "#/definitions/BigSegmentTargetChanges"
      excluded:
        $ref: "#/definitions/BigSegmentTargetChanges"
  userSettingsBody:
    type: "object"
    properties:
      setting:
        type: "boolean"
        description: "The variation value to set for the user. Must match the variation\
          \ type of the flag.\n"
  webhookBody:
    type: "object"
    required:
    - "on"
    - "sign"
    - "url"
    properties:
      url:
        type: "string"
        example: "https://example.com/example"
        description: "The URL of the remote webhook."
      secret:
        type: "string"
        example: "<password>"
        description: "If sign is true, and the secret attribute is omitted, LaunchDarkly\
          \ will automatically generate a secret for you."
      sign:
        type: "boolean"
        description: "If sign is false, the webhook will not include a signature header,\
          \ and the secret can be omitted."
      "on":
        type: "boolean"
        example: true
        description: "Whether this webhook is enabled or not."
      name:
        type: "string"
        example: "Example hook"
        description: "The name of the webhook."
      statements:
        type: "array"
        items:
          $ref: "#/definitions/Statement"
      tags:
        type: "array"
        example: []
        description: "Tags for the webhook."
        items:
          type: "string"
  customRoleBody:
    type: "object"
    required:
    - "key"
    - "name"
    - "policy"
    properties:
      name:
        type: "string"
        example: "revenue team"
        description: "Name of the custom role."
      description:
        type: "string"
        example: "Description of revenue team role here"
        description: "Description of the custom role."
      key:
        type: "string"
        example: "revenue-team"
        description: "The 20-hexdigit id or the key for a custom role."
      policy:
        type: "array"
        items:
          $ref: "#/definitions/Policy"
  membersBody:
    type: "object"
    required:
    - "email"
    properties:
      email:
        type: "string"
        example: "exampleuser@email.com"
      firstName:
        type: "string"
        example: "Bob"
      lastName:
        type: "string"
        example: "Loblaw"
      role:
        $ref: "#/definitions/Role"
      customRoles:
        type: "array"
        items:
          type: "string"
          example: "revenue-team"
          description: "The 20-hexdigit id or the key for a custom role."
      inlineRole:
        type: "array"
        items:
          $ref: "#/definitions/Statement"
  destinationBody:
    type: "object"
    required:
    - "config"
    - "kind"
    - "name"
    properties:
      name:
        type: "string"
        example: "Example Google Pub/Sub Destination"
        description: "A human-readable name for your data export destination."
      kind:
        type: "string"
        example: "google-pubsub"
        description: "The data export destination type. Available choices are kinesis,\
          \ google-pubsub, mparticle, or segment."
        enum:
        - "google-pubsub"
        - "kinesis"
        - "mparticle"
        - "segment"
      config:
        type: "object"
        example:
          project: "cool-project"
          topic: "test"
        description: "destination-specific configuration."
        properties: {}
      "on":
        type: "boolean"
        example: true
        description: "Whether the data export destination is on or not."
  tokenBody:
    type: "object"
    properties:
      name:
        type: "string"
        example: "My access token"
        description: "A human-friendly name for the access token"
      role:
        type: "string"
        example: "writer"
        description: "The name of a built-in role for the token"
      customRoleIds:
        type: "array"
        description: "A list of custom role IDs to use as access limits for the access\
          \ token"
        items:
          type: "string"
          example: ""
      inlineRole:
        type: "array"
        items:
          $ref: "#/definitions/Statement"
      serviceToken:
        type: "boolean"
        description: "Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens"
      defaultApiVersion:
        type: "integer"
        description: "The default API version for this token"
  relayProxyConfigBody:
    type: "object"
    properties:
      name:
        type: "string"
        example: "My relay proxy config"
        description: "A human-friendly name for the relay proxy configuration"
      policy:
        type: "array"
        items:
          $ref: "#/definitions/Policy"
  subscriptionBody:
    type: "object"
    required:
    - "config"
    - "name"
    properties:
      name:
        type: "string"
        example: "Example Datadog Integration"
        description: "A human-readable name for your subscription configuration."
      statements:
        type: "array"
        items:
          $ref: "#/definitions/Statement"
      config:
        type: "object"
        example:
          apiKey: "582**************************116"
          hostURL: "https://api.datadoghq.com"
        description: "Integration-specific configuration fields."
        properties: {}
      "on":
        type: "boolean"
        example: true
        description: "Whether the integration subscription is active or not."
      tags:
        type: "array"
        example: []
        description: "Tags for the integration subscription."
        items:
          type: "string"
  Member__lastSeenMetadata:
    type: "object"
    properties:
      tokenId:
        type: "string"
        example: "5fd2a1ee05600316d5cb3e96"
        description: "If the last time this member accessed LaunchDarkly was using\
          \ the REST API, this value will be set to the ID of the personal access\
          \ token used."
    example:
      tokenId: "5fd2a1ee05600316d5cb3e96"
  FeatureFlagScheduledChangesConflicts_instructions:
    type: "object"
    properties:
      kind:
        type: "string"
        example: "removeUserTargets"
        description: "The name of the modification you would like to perform on a\
          \ resource."
      conflicts:
        type: "array"
        items:
          $ref: "#/definitions/ScheduledChangesFeatureFlagConflict"
    example:
      kind: "removeUserTargets"
      conflicts:
      - reason: "reason"
        _id: "_id"
      - reason: "reason"
        _id: "_id"
  DependentFlag__links:
    type: "object"
    properties:
      self:
        $ref: "#/definitions/Link"
    example:
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
  DependentFlagEnvironment__links:
    type: "object"
    properties:
      self:
        $ref: "#/definitions/Link"
      flagLink:
        $ref: "#/definitions/Link"
    example:
      flagLink:
        href: "/api/v2/endpoint"
        type: "application/json"
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
  Environment_approvalSettings:
    type: "object"
    properties:
      serviceKind:
        type: "string"
        description: "The approvals system used."
        enum:
        - "launchdarkly"
        - "service-now"
      required:
        type: "boolean"
        description: "Whether any changes to flags in this environment will require\
          \ approval. You may only set required or requiredApprovalTags, not both."
      canReviewOwnRequest:
        type: "boolean"
        description: "Whether requesters can approve or decline their own request.\
          \ They may always comment."
      minNumApprovals:
        type: "integer"
        format: "int64"
        example: 2
        description: "The number of approvals required before an approval request\
          \ can be applied."
      canApplyDeclinedChanges:
        type: "boolean"
        description: "Whether changes can be applied as long as minNumApprovals is\
          \ met, regardless of if any reviewers have declined a request."
      requiredApprovalTags:
        type: "array"
        description: "An array of tags used to specify which flags with those tags\
          \ require approval. You may only set requiredApprovalTags or required, not\
          \ both."
        items:
          type: "string"
    description: "Approval settings for an environment. Only appears if the approvals\
      \ feature is enabled."
    example:
      serviceKind: "launchdarkly"
      canReviewOwnRequest: true
      requiredApprovalTags:
      - "requiredApprovalTags"
      - "requiredApprovalTags"
      canApplyDeclinedChanges: true
      minNumApprovals: 2
      required: true
  AuditLogEntry_target:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      name:
        type: "string"
        example: "Testing"
      resources:
        type: "array"
        items:
          type: "string"
          example: "proj/alexis:env/test"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "Testing"
      resources:
      - "proj/alexis:env/test"
      - "proj/alexis:env/test"
  SemanticPatchInstruction_inner:
    type: "object"
    properties:
      kind:
        type: "string"
        example: "removeUserTargets"
        description: "The name of the modification you would like to perform on a\
          \ resource."
  IntegrationSubscription__status:
    type: "object"
    properties:
      successCount:
        type: "integer"
        example: 6
      lastSuccess:
        type: "integer"
        format: "int64"
        example: 1443652232590
        description: "A unix epoch time in milliseconds specifying the last time this\
          \ integration was successfully used."
      errorCount:
        type: "integer"
        example: 2
    example:
      successCount: 6
      lastSuccess: 1443652232590
      errorCount: 2
parameters:
  ResourceId:
    name: "resourceId"
    in: "path"
    description: "The resource ID."
    required: true
    type: "string"
    x-exportParamName: "ResourceId"
  WebhookPostRequest:
    in: "body"
    name: "webhookBody"
    description: "New webhook."
    required: true
    schema:
      $ref: "#/definitions/webhookBody"
    x-exportParamName: "WebhookBody"
  FeatureFlagCopyBody:
    in: "body"
    name: "featureFlagCopyBody"
    description: "Copy feature flag configurations between environments."
    required: true
    schema:
      $ref: "#/definitions/featureFlagCopyBody"
    x-exportParamName: "FeatureFlagCopyBody"
  FeatureFlagPostRequest:
    in: "body"
    name: "featureFlagBody"
    description: "Create a new feature flag."
    required: true
    schema:
      $ref: "#/definitions/featureFlagBody"
    x-exportParamName: "FeatureFlagBody"
  ScheduledChangeId:
    name: "scheduledChangeId"
    in: "path"
    description: "The id of the scheduled change"
    required: true
    type: "string"
    x-exportParamName: "ScheduledChangeId"
  FlagConfigScheduledChangesConflictsBody:
    in: "body"
    name: "flagConfigScheduledChangesConflictsBody"
    description: "Used to determine if a semantic patch will result in conflicts with\
      \ scheduled changes on a feature flag."
    required: true
    schema:
      $ref: "#/definitions/flagConfigScheduledChangesConflictsBody"
    x-exportParamName: "FlagConfigScheduledChangesConflictsBody"
  FlagConfigScheduledChangesPostBody:
    in: "body"
    name: "flagConfigScheduledChangesPostBody"
    description: "Create scheduled changes on a feature flag."
    required: true
    schema:
      $ref: "#/definitions/flagConfigScheduledChangesPostBody"
    x-exportParamName: "FlagConfigScheduledChangesPostBody"
  FlagConfigScheduledChangesPatchBody:
    in: "body"
    name: "flagConfigScheduledChangesPatchBody"
    description: "Update scheduled changes on a feature flag."
    required: true
    schema:
      $ref: "#/definitions/flagConfigScheduledChangesPatchBody"
    x-exportParamName: "FlagConfigScheduledChangesPatchBody"
  DestinationPostRequest:
    in: "body"
    name: "destinationBody"
    description: "Create a new data export destination."
    required: true
    schema:
      $ref: "#/definitions/destinationBody"
    x-exportParamName: "DestinationBody"
  UserSegmentPostRequest:
    in: "body"
    name: "userSegmentBody"
    description: "Create a new user segment."
    required: true
    schema:
      $ref: "#/definitions/userSegmentBody"
    x-exportParamName: "UserSegmentBody"
  BigSegmentTargetsPostRequest:
    in: "body"
    name: "bigSegmentTargetsBody"
    description: "Add or remove user targets to the included or excluded lists on\
      \ a big segment. Contact your account manager for early access to this feature."
    required: true
    schema:
      $ref: "#/definitions/bigSegmentTargetsBody"
    x-exportParamName: "BigSegmentTargetsBody"
  ProjectPostRequest:
    in: "body"
    name: "projectBody"
    description: "Project keys must be unique within an account."
    required: true
    schema:
      $ref: "#/definitions/projectBody"
    x-exportParamName: "ProjectBody"
  EnvironmentPostRequest:
    in: "body"
    name: "environmentBody"
    description: "New environment."
    required: true
    schema:
      $ref: "#/definitions/EnvironmentPost"
    x-exportParamName: "EnvironmentBody"
  ProjectKey:
    name: "projectKey"
    in: "path"
    description: "The project key, used to tie the flags together under one project\
      \ so they can be managed together."
    required: true
    type: "string"
    x-exportParamName: "ProjectKey"
  EnvironmentKey:
    name: "environmentKey"
    in: "path"
    description: "The environment key, used to tie together flag configuration and\
      \ users under one environment so they can be managed together."
    required: true
    type: "string"
    x-exportParamName: "EnvironmentKey"
  EnvironmentKeyQuery:
    name: "env"
    in: "query"
    description: "By default, each feature will include configurations for each environment.\
      \ You can filter environments with the env query parameter. For example, setting\
      \ env=[\"production\"] will restrict the returned configurations to just your\
      \ production environment."
    required: false
    type: "array"
    items:
      type: "string"
    collectionFormat: "multi"
    x-exportParamName: "Env"
  EnvironmentSDKKeyExpiry:
    name: "expiry"
    in: "query"
    description: "An expiration time for the old environment SDK key, expressed as\
      \ a Unix epoch time in milliseconds. By default, the key will expire immediately."
    required: false
    type: "integer"
    format: "int64"
    x-exportParamName: "Expiry"
    x-optionalDataType: "Int64"
  EnvironmentMobileKeyExpiry:
    name: "expiry"
    in: "query"
    description: "The expiry parameter is deprecated for this endpoint, so the old\
      \ mobile key will always expire immediately. This parameter will be removed\
      \ in an upcoming major API client version."
    required: false
    type: "integer"
    format: "int64"
    x-exportParamName: "Expiry"
    x-optionalDataType: "Int64"
  SummaryQuery:
    name: "summary"
    in: "query"
    description: "By default in api version >= 1, flags will _not_ include their list\
      \ of prerequisites, targets or rules.  Set summary=0 to include these fields\
      \ for each flag returned."
    required: false
    type: "boolean"
    x-exportParamName: "Summary"
    x-optionalDataType: "Bool"
  ArchivedQuery:
    name: "archived"
    in: "query"
    description: "When set to 1, only archived flags will be included in the list\
      \ of flags returned.  By default, archived flags are not included in the list\
      \ of flags."
    required: false
    type: "boolean"
    x-exportParamName: "Archived"
    x-optionalDataType: "Bool"
  LimitQuery:
    name: "limit"
    in: "query"
    description: "The number of objects to return. Defaults to -1, which returns everything."
    required: false
    type: "number"
    x-exportParamName: "Limit"
    x-optionalDataType: "Float32"
  OffsetQuery:
    name: "offset"
    in: "query"
    description: "Where to start in the list. This is for use with pagination. For\
      \ example, an offset of 10 would skip the first 10 items and then return the\
      \ next limit items."
    required: false
    type: "number"
    x-exportParamName: "Offset"
    x-optionalDataType: "Float32"
  FilterQuery:
    name: "filter"
    in: "query"
    description: "A comma-separated list of filters. Each filter is of the form field:value."
    required: false
    type: "string"
    x-exportParamName: "Filter"
    x-optionalDataType: "String"
  SortQuery:
    name: "sort"
    in: "query"
    description: "A comma-separated list of fields to sort by. A field prefixed by\
      \ a - will be sorted in descending order."
    required: false
    type: "string"
    x-exportParamName: "Sort"
    x-optionalDataType: "String"
  FeatureFlagKey:
    name: "featureFlagKey"
    in: "path"
    description: "The feature flag's key. The key identifies the flag in your code."
    required: true
    type: "string"
    x-exportParamName: "FeatureFlagKey"
  CloneFlagKeyQuery:
    name: "clone"
    in: "query"
    description: "The key of the feature flag to be cloned. The key identifies the\
      \ flag in your code.  For example, setting clone=flagKey will copy the full\
      \ targeting configuration for all environments (including on/off state) from\
      \ the original flag to the new flag."
    required: false
    type: "string"
    x-exportParamName: "Clone"
    x-optionalDataType: "String"
  UserSegmentKey:
    name: "userSegmentKey"
    in: "path"
    description: "The user segment's key. The key identifies the user segment in your\
      \ code."
    required: true
    type: "string"
    x-exportParamName: "UserSegmentKey"
  DestinationId:
    name: "destinationId"
    in: "path"
    description: "The data export destination ID."
    required: true
    type: "string"
    x-exportParamName: "DestinationId"
  UserKey:
    name: "userKey"
    in: "path"
    description: "The user's key."
    required: true
    type: "string"
    x-exportParamName: "UserKey"
  Tag:
    name: "tag"
    in: "query"
    description: "Filter by tag. A tag can be used to group flags across projects."
    required: false
    type: "string"
    x-exportParamName: "Tag"
    x-optionalDataType: "String"
  Limit:
    name: "limit"
    in: "query"
    description: "Pagination limit."
    required: false
    type: "integer"
    x-exportParamName: "Limit"
    x-optionalDataType: "Int32"
  Query:
    name: "q"
    in: "query"
    description: "Search query."
    required: false
    type: "string"
    x-exportParamName: "Q"
    x-optionalDataType: "String"
  HMAC:
    name: "h"
    in: "query"
    description: "This parameter is required when following \"next\" links."
    required: false
    type: "string"
    x-exportParamName: "H"
    x-optionalDataType: "String"
  ScrollId:
    name: "scrollId"
    in: "query"
    description: "This parameter is required when following \"next\" links."
    required: false
    type: "string"
    x-exportParamName: "ScrollId"
    x-optionalDataType: "String"
  Offset:
    name: "offset"
    in: "query"
    description: "Specifies the first item to return in the collection."
    required: false
    type: "integer"
    x-exportParamName: "Offset"
    x-optionalDataType: "Int32"
  After:
    name: "after"
    in: "query"
    description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
      \ All entries returned will have occurred after this timestamp."
    required: false
    type: "integer"
    format: "int64"
    x-exportParamName: "After"
    x-optionalDataType: "Int64"
  PatchRequest:
    in: "body"
    name: "patchDelta"
    description: "Requires a JSON Patch representation of the desired changes to the\
      \ project. 'http://jsonpatch.com/'"
    required: true
    schema:
      type: "array"
      items:
        $ref: "#/definitions/PatchOperation"
    x-exportParamName: "PatchDelta"
  UserSettingsPutRequest:
    in: "body"
    name: "userSettingsBody"
    required: true
    schema:
      $ref: "#/definitions/userSettingsBody"
    x-exportParamName: "UserSettingsBody"
  Before:
    name: "before"
    in: "query"
    description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
      \ All entries returned will have before this timestamp."
    required: false
    type: "integer"
    format: "int64"
    x-exportParamName: "Before"
    x-optionalDataType: "Int64"
  Q:
    name: "q"
    in: "query"
    description: "Text to search for. You can search for the full or partial name\
      \ of the resource involved or full or partial email address of the member who\
      \ made the change."
    required: false
    type: "string"
    x-exportParamName: "Q"
    x-optionalDataType: "String"
  AuditLimit:
    name: "limit"
    in: "query"
    description: "A limit on the number of audit log entries to be returned, between\
      \ 1 and 20."
    required: false
    type: "number"
    x-exportParamName: "Limit"
    x-optionalDataType: "Float32"
  Spec:
    name: "spec"
    in: "query"
    description: "A resource specifier, allowing you to filter audit log listings\
      \ by resource."
    required: false
    type: "string"
    x-exportParamName: "Spec"
    x-optionalDataType: "String"
  MembersPostRequest:
    in: "body"
    name: "membersBody"
    description: "New members to invite."
    required: true
    schema:
      type: "array"
      items:
        $ref: "#/definitions/membersBody"
    x-exportParamName: "MembersBody"
  MemberId:
    name: "memberId"
    in: "path"
    description: "The member ID."
    required: true
    type: "string"
    x-exportParamName: "MemberId"
  CustomRolePostRequest:
    in: "body"
    name: "customRoleBody"
    description: "New role or roles to create."
    required: true
    schema:
      $ref: "#/definitions/customRoleBody"
    x-exportParamName: "CustomRoleBody"
  CustomRoleKey:
    name: "customRoleKey"
    in: "path"
    description: "The custom role key."
    required: true
    type: "string"
    x-exportParamName: "CustomRoleKey"
  PatchWithComment:
    in: "body"
    name: "patchComment"
    description: "Requires a JSON Patch representation of the desired changes to the\
      \ project, and an optional comment. 'http://jsonpatch.com/' Feature flag patches\
      \ also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386'\
      \ The addition of comments is also supported."
    required: true
    schema:
      $ref: "#/definitions/patchComment"
    x-exportParamName: "PatchComment"
  PatchOnly:
    in: "body"
    name: "PatchOnly"
    description: "Requires a JSON Patch representation of the desired changes to the\
      \ project. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge\
      \ Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments\
      \ is also supported."
    required: true
    schema:
      type: "array"
      items:
        $ref: "#/definitions/PatchOperation"
    x-exportParamName: "PatchOnly"
  SemanticPatchWithComment:
    in: "body"
    name: "SemanticPatchWithComment"
    description: "Requires a Semantic Patch representation of the desired changes\
      \ to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'.\
      \ The addition of comments is also supported."
    required: true
    schema:
      type: "object"
    x-exportParamName: "SemanticPatchWithComment"
  StreamSource:
    name: "source"
    in: "path"
    description: "The source of where the stream comes from."
    required: true
    type: "string"
    x-exportParamName: "Source"
  EventType:
    name: "type"
    in: "path"
    description: "The type of event we would like to track."
    required: true
    type: "string"
    x-exportParamName: "Type_"
  EvaluationEnvId:
    name: "envId"
    in: "path"
    description: "The environment id for the flag evaluations in question."
    required: true
    type: "string"
    x-exportParamName: "EnvId"
  EvaluationFlagKey:
    name: "flagKey"
    in: "path"
    description: "The key of the flag we want metrics for."
    required: true
    type: "string"
    x-exportParamName: "FlagKey"
  TokensPostRequest:
    in: "body"
    name: "tokenBody"
    description: "Create a new access token."
    required: true
    schema:
      $ref: "#/definitions/tokenBody"
    x-exportParamName: "TokenBody"
  TokenId:
    name: "tokenId"
    in: "path"
    description: "The access token ID."
    required: true
    type: "string"
    x-exportParamName: "TokenId"
  TokenShowAllQuery:
    name: "showAll"
    in: "query"
    description: "If set to true, and the authentication access token has the \"Admin\"\
      \ role, personal access tokens for all members will be retrieved."
    required: false
    type: "boolean"
    x-exportParamName: "ShowAll"
    x-optionalDataType: "Bool"
  TokenExpiry:
    name: "expiry"
    in: "query"
    description: "An expiration time for the old token key, expressed as a Unix epoch\
      \ time in milliseconds. By default, the token will expire immediately."
    required: false
    type: "integer"
    format: "int64"
    x-exportParamName: "Expiry"
    x-optionalDataType: "Int64"
  RelayProxyConfigPostRequest:
    in: "body"
    name: "relayProxyConfigBody"
    description: "Create a new relay proxy configuration"
    required: true
    schema:
      $ref: "#/definitions/relayProxyConfigBody"
    x-exportParamName: "RelayProxyConfigBody"
  RelayProxyConfigId:
    name: "id"
    in: "path"
    description: "The relay proxy configuration ID"
    required: true
    type: "string"
    x-exportParamName: "Id"
  RelayProxyConfigsExpiry:
    name: "expiry"
    in: "query"
    description: "An expiration time for the old relay proxy configuration key, expressed\
      \ as a Unix epoch time in milliseconds. By default, the relay proxy configuration\
      \ will expire immediately"
    required: false
    type: "integer"
    format: "int64"
    x-exportParamName: "Expiry"
    x-optionalDataType: "Int64"
  ApprovalRequestId:
    name: "approvalRequestId"
    in: "path"
    description: "The approval request ID"
    required: true
    type: "string"
    x-exportParamName: "ApprovalRequestId"
  ApprovalRequestPostRequest:
    in: "body"
    name: "approvalRequestConfigBody"
    description: "Create a new approval request"
    required: false
    schema:
      $ref: "#/definitions/approvalRequestConfigBody"
    x-exportParamName: "ApprovalRequestConfigBody"
  ApprovalRequestReviewPostRequest:
    in: "body"
    name: "approvalRequestReviewConfigBody"
    description: "Review an approval request"
    required: true
    schema:
      $ref: "#/definitions/approvalRequestReviewConfigBody"
    x-exportParamName: "ApprovalRequestReviewConfigBody"
  ApprovalRequestApplyPostRequest:
    in: "body"
    name: "approvalRequestApplyConfigBody"
    description: "Apply an approval request"
    required: true
    schema:
      $ref: "#/definitions/approvalRequestApplyConfigBody"
    x-exportParamName: "ApprovalRequestApplyConfigBody"
  IntegrationKey:
    name: "integrationKey"
    in: "path"
    description: "The key used to specify the integration kind."
    required: true
    type: "string"
    x-exportParamName: "IntegrationKey"
  IntegrationId:
    name: "integrationId"
    in: "path"
    description: "The integration ID."
    required: true
    type: "string"
    x-exportParamName: "IntegrationId"
  IntegrationPostRequest:
    in: "body"
    name: "subscriptionBody"
    description: "Create a new integration subscription."
    required: true
    schema:
      $ref: "#/definitions/subscriptionBody"
    x-exportParamName: "SubscriptionBody"
responses:
  BetaApi403:
    description: "This is a beta API, you must pass beta in the LD-API-Version header\
      \ to use it."
    schema:
      $ref: "#/definitions/UsageError"
  CustomRole2xx:
    description: "Custom role response."
    schema:
      $ref: "#/definitions/CustomRole"
  Destination2xx:
    description: "Destination response."
    schema:
      $ref: "#/definitions/Destination"
  Environment2xx:
    description: "Environment response."
    schema:
      $ref: "#/definitions/Environment"
  EvaluationUsage404:
    description: "The environment or flag you requested could not be found"
    schema:
      $ref: "#/definitions/EvaluationUsageError"
  Member2xx:
    description: "Member response."
    schema:
      $ref: "#/definitions/Member"
  Project2xx:
    description: "Successful Project response."
    schema:
      $ref: "#/definitions/Project"
  RelayProxyConfig2xx:
    description: "Relay proxy config response."
    schema:
      $ref: "#/definitions/RelayProxyConfig"
  Root200:
    description: "A list of links to available resources in the API."
    schema:
      $ref: "#/definitions/Links"
  Standard201:
    description: "Resource created."
  Standard204:
    description: "Action completed successfully."
  Standard400:
    description: "Invalid request body."
  Standard401:
    description: "Invalid access token."
  Standard403:
    description: "Access to the requested resource was denied."
  Standard404:
    description: "Invalid resource specifier."
  Standard409:
    description: "Status conflict."
  StreamUsage404:
    description: "The stream source you requested could not be found"
    schema:
      $ref: "#/definitions/StreamUsageError"
  Token2xx:
    description: "Token response."
    schema:
      $ref: "#/definitions/Token"
  UserSegment2xx:
    description: "User segment response."
    schema:
      $ref: "#/definitions/UserSegment"
  Webhook2xx:
    description: "Webhook response."
    schema:
      $ref: "#/definitions/Webhook"
